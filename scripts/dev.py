#!/usr/bin/env python3
"""–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""

import os
import sys
import click
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from app import create_app, db
from app.utils.admin_tools import DatabaseManager

@click.group()
def cli():
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è DENIZ Restaurant."""
    pass

@cli.command()
@click.option('--port', '-p', default=8000, help='Port to run on')
@click.option('--host', '-h', default='0.0.0.0', help='Host to bind to')
@click.option('--debug/--no-debug', default=True, help='Enable debug mode')
def run(port, host, debug):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏."""
    os.environ.setdefault('FLASK_ENV', 'development')
    os.environ.setdefault('FLASK_DEBUG', '1' if debug else '0')
    
    click.echo(f"üöÄ –ó–∞–ø—É—Å–∫ DENIZ Restaurant –Ω–∞ {host}:{port}")
    click.echo(f"üîß Debug —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if debug else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    app = create_app('development')
    app.run(host=host, port=port, debug=debug, use_reloader=True)

@cli.command()
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    click.echo("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    app = create_app('development')
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        click.echo("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        result = DatabaseManager.seed_database()
        click.echo(f"üìä {result['message']}")

@cli.command()
def reset_db():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if click.confirm('‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?'):
        app = create_app('development')
        with app.app_context():
            db.drop_all()
            db.create_all()
            result = DatabaseManager.seed_database()
            click.echo(f"üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞: {result['message']}")

@cli.command()
def show_routes():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = create_app('development')
    with app.app_context():
        click.echo("üìã –ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        for rule in app.url_map.iter_rules():
            methods = ','.join(sorted(rule.methods - {'HEAD', 'OPTIONS'}))
            click.echo(f"  {rule.endpoint:30} {methods:15} {rule.rule}")

if __name__ == '__main__':
    cli() 