#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –±–ª—é–¥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from app import create_app, db
from app.models import (
    Order, OrderItem, Table, TableAssignment, WaiterCall,
    DailyReport, AuditLog, SystemSetting, BonusCard, Banner
)

def clear_database():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –±–ª—é–¥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    app = create_app()
    
    with app.app_context():
        try:
            print("üóëÔ∏è  –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            print("\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
            print(f"  - –ó–∞–∫–∞–∑—ã: {Order.query.count()}")
            print(f"  - –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {OrderItem.query.count()}")
            print(f"  - –°—Ç–æ–ª—ã: {Table.query.count()}")
            print(f"  - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤: {TableAssignment.query.count()}")
            print(f"  - –í—ã–∑–æ–≤—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞: {WaiterCall.query.count()}")
            print(f"  - –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {DailyReport.query.count()}")
            print(f"  - –ê—É–¥–∏—Ç –ª–æ–≥–∏: {AuditLog.query.count()}")
            print(f"  - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {SystemSetting.query.count()}")
            print(f"  - –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã: {BonusCard.query.count()}")
            print(f"  - –ë–∞–Ω–Ω–µ—Ä—ã: {Banner.query.count()}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("\n‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ? (yes/no): ")
            if confirm.lower() != 'yes':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            print("\nüßπ –£–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
            
            # 1. –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            print("  - –£–¥–∞–ª—è—é –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤...")
            OrderItem.query.delete()
            
            # 2. –ó–∞–∫–∞–∑—ã
            print("  - –£–¥–∞–ª—è—é –∑–∞–∫–∞–∑—ã...")
            Order.query.delete()
            
            # 3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤
            print("  - –£–¥–∞–ª—è—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤...")
            TableAssignment.query.delete()
            
            # 4. –í—ã–∑–æ–≤—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
            print("  - –£–¥–∞–ª—è—é –≤—ã–∑–æ–≤—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞...")
            WaiterCall.query.delete()
            
            # 5. –°—Ç–æ–ª—ã (—Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤)
            print("  - –°–±—Ä–∞—Å—ã–≤–∞—é —Å—Ç–∞—Ç—É—Å—ã —Å—Ç–æ–ª–æ–≤...")
            tables = Table.query.all()
            for table in tables:
                table.status = 'available'
            db.session.commit()
            
            # 6. –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            print("  - –£–¥–∞–ª—è—é –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã...")
            DailyReport.query.delete()
            
            # 7. –ê—É–¥–∏—Ç –ª–æ–≥–∏
            print("  - –£–¥–∞–ª—è—é –∞—É–¥–∏—Ç –ª–æ–≥–∏...")
            AuditLog.query.delete()
            
            # 8. –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            print("  - –£–¥–∞–ª—è—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            SystemSetting.query.delete()
            
            # 9. –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã
            print("  - –£–¥–∞–ª—è—é –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã...")
            BonusCard.query.delete()
            
            # 10. –ë–∞–Ω–Ω–µ—Ä—ã
            print("  - –£–¥–∞–ª—è—é –±–∞–Ω–Ω–µ—Ä—ã...")
            Banner.query.delete()
            
            # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            db.session.commit()
            
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            print("\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
            print(f"  - –ó–∞–∫–∞–∑—ã: {Order.query.count()}")
            print(f"  - –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {OrderItem.query.count()}")
            print(f"  - –°—Ç–æ–ª—ã: {Table.query.count()}")
            print(f"  - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤: {TableAssignment.query.count()}")
            print(f"  - –í—ã–∑–æ–≤—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞: {WaiterCall.query.count()}")
            print(f"  - –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {DailyReport.query.count()}")
            print(f"  - –ê—É–¥–∏—Ç –ª–æ–≥–∏: {AuditLog.query.count()}")
            print(f"  - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {SystemSetting.query.count()}")
            print(f"  - –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã: {BonusCard.query.count()}")
            print(f"  - –ë–∞–Ω–Ω–µ—Ä—ã: {Banner.query.count()}")
            
            print("\nüéØ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (staff)")
            print("  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é (menu_categories)")
            print("  - –ë–ª—é–¥–∞ (menu_items)")
            print("  - –†–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π (menu_item_sizes)")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö DENIZ Restaurant")
    print("=" * 50)
    
    try:
        clear_database()
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
