/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
 */

class CartManager {
    static init() {
        console.log('üõí Initializing Cart Manager');
        
        this.items = new Map();
        this.tableId = window.CLIENT_CONFIG?.tableId || 1;
        this.bonusCard = null;
        this.serviceChargePercent = window.CLIENT_SETTINGS?.service_charge_percent || 5;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
        this.loadFromStorage();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.initializeElements();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupEventListeners();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ—Ä–∑–∏–Ω—É
        this.render();
        
        console.log('‚úÖ Cart Manager initialized');
    }

    static initializeElements() {
        this.cartContent = document.getElementById('cartContent');
        this.cartFooter = document.getElementById('cartFooter');
        this.clearCartBtn = document.getElementById('clearCartBtn');
        this.tableSelectBtn = document.getElementById('tableSelectBtn');
        this.currentTableNumber = document.getElementById('currentTableNumber');
    }

    static setupEventListeners() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if (this.clearCartBtn) {
            this.clearCartBtn.addEventListener('click', () => {
                this.clear();
            });
        }

        // –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
        if (this.tableSelectBtn) {
            this.tableSelectBtn.addEventListener('click', () => {
                ModalManager.openTableSelection(this.tableId);
            });
        }

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        document.addEventListener('cartUpdated', () => {
            this.render();
            this.saveToStorage();
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        window.addEventListener('beforeunload', () => {
            this.saveToStorage();
        });
    }

    static addItem(dishId, quantity = 1) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é
        const dish = this.getDishById(dishId);
        if (!dish) {
            NotificationManager.showError('–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        const currentQuantity = this.items.get(dishId) || 0;
        const newQuantity = currentQuantity + quantity;
        
        if (newQuantity <= 0) {
            this.removeItem(dishId);
            return;
        }

        this.items.set(dishId, newQuantity);
        
        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.triggerUpdate();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        NotificationManager.showSuccess(`${dish.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –±–ª—é–¥
        this.updateDishButtons();
    }

    static removeItem(dishId, quantity = 1) {
        const currentQuantity = this.items.get(dishId) || 0;
        const newQuantity = currentQuantity - quantity;
        
        if (newQuantity <= 0) {
            this.items.delete(dishId);
        } else {
            this.items.set(dishId, newQuantity);
        }
        
        this.triggerUpdate();
        this.updateDishButtons();
    }

    static setItemQuantity(dishId, quantity) {
        if (quantity <= 0) {
            this.items.delete(dishId);
        } else {
            this.items.set(dishId, quantity);
        }
        
        this.triggerUpdate();
        this.updateDishButtons();
    }

    static getItemQuantity(dishId) {
        return this.items.get(dishId) || 0;
    }

    static clear() {
        if (this.items.size === 0) {
            NotificationManager.showInfo('–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ModalManager.showConfirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?', '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', () => {
            this.items.clear();
            this.bonusCard = null;
            this.triggerUpdate();
            this.updateDishButtons();
            NotificationManager.showSuccess('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
        });
    }

    static getTotalItems() {
        let total = 0;
        this.items.forEach(quantity => {
            total += quantity;
        });
        return total;
    }

    static getSubtotal() {
        let subtotal = 0;
        this.items.forEach((quantity, dishId) => {
            const dish = this.getDishById(dishId);
            if (dish) {
                subtotal += dish.price * quantity;
            }
        });
        return subtotal;
    }

    static getServiceCharge() {
        return this.getSubtotal() * (this.serviceChargePercent / 100);
    }

    static getDiscount() {
        if (!this.bonusCard) return 0;
        return this.getSubtotal() * (this.bonusCard.discount_percent / 100);
    }

    static getTotal() {
        return this.getSubtotal() + this.getServiceCharge() - this.getDiscount();
    }

    static render() {
        if (!this.cartContent) return;

        if (this.items.size === 0) {
            this.renderEmpty();
        } else {
            this.renderItems();
        }
    }

    static renderEmpty() {
        this.cartContent.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-illustration">
                    <img src="/static/assets/images/fish.png" alt="–†—ã–±–∞" class="fish-image">
                </div>
                <p class="empty-cart-text">
                    –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–æ –º–æ—Ä–µ –ø–æ–ª–Ω–æ–µ.<br>
                    –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–µ–Ω—é ‚Äî —Ç–∞–º –≤–æ–ª–Ω—ã –≤–∫—É—Å–∞.
                </p>
            </div>
            <div class="rudder-pattern"></div>
        `;
        
        if (this.cartFooter) {
            this.cartFooter.style.display = 'none';
        }
    }

    static renderItems() {
        const itemsHTML = Array.from(this.items.entries()).map(([dishId, quantity]) => {
            const dish = this.getDishById(dishId);
            if (!dish) return '';
            
            return `
                <div class="cart-item" data-dish-id="${dishId}">
                    <button class="cart-item-remove" onclick="CartManager.removeItem(${dishId}, ${quantity})">√ó</button>
                    
                    <img class="cart-item-image" 
                         src="${dish.image_url || '/static/assets/images/fish.png'}" 
                         alt="${this.escapeHTML(dish.name)}">
                    
                    <div class="cart-item-details">
                        <div class="cart-item-name">${this.escapeHTML(dish.name)}</div>
                        <div class="cart-item-price">${APIUtils.formatPrice(dish.price)}</div>
                    </div>
                    
                    <div class="cart-item-actions">
                        <button class="btn-round btn-minus" onclick="CartManager.removeItem(${dishId})">‚àí</button>
                        <span class="quantity-display">${quantity}</span>
                        <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})">+</button>
                    </div>
                </div>
            `;
        }).join('');

        this.cartContent.innerHTML = `
            <div class="cart-items">
                ${itemsHTML}
            </div>
            <div class="rudder-pattern"></div>
        `;

        this.renderFooter();
    }

    static renderFooter() {
        if (!this.cartFooter) return;

        const subtotal = this.getSubtotal();
        const serviceCharge = this.getServiceCharge();
        const discount = this.getDiscount();
        const total = this.getTotal();

        const discountHTML = discount > 0 ? `
            <div class="summary-line discount">
                <span class="summary-label">–°–∫–∏–¥–∫–∞ -${this.bonusCard.discount_percent}%</span>
                <span class="summary-value">-${APIUtils.formatPrice(discount)}</span>
            </div>
        ` : '';

        this.cartFooter.innerHTML = `
            <div class="cart-summary">
                <div class="summary-line subtotal">
                    <span class="summary-label">–ü–æ–¥—ã—Ç–æ–≥</span>
                    <span class="summary-value">${APIUtils.formatPrice(subtotal)}</span>
                </div>
                
                <div class="summary-line service-charge">
                    <span class="summary-label">–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä ${this.serviceChargePercent}%</span>
                    <span class="summary-value">${APIUtils.formatPrice(serviceCharge)}</span>
                </div>
                
                ${discountHTML}
                
                <div class="summary-line total">
                    <span class="summary-label">–ò—Ç–æ–≥–æ</span>
                    <span class="summary-value">${APIUtils.formatPrice(total)}</span>
                </div>
            </div>
            
            <button class="btn bonus-card-btn" onclick="CartManager.openBonusCard()">
                ${this.bonusCard ? 'üí≥ –ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞' : 'üí≥ –ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞'}
            </button>
            
            <button class="btn btn-primary continue-order-btn" onclick="CartManager.proceedToOrder()">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
        `;

        this.cartFooter.style.display = 'block';
    }

    static updateDishButtons() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –±–ª—é–¥
        document.querySelectorAll('.dish-card').forEach(card => {
            const dishId = parseInt(card.dataset.dishId);
            const quantity = this.getItemQuantity(dishId);
            const actionsDiv = card.querySelector('.dish-footer .dish-actions');
            
            if (actionsDiv) {
                if (quantity > 0) {
                    actionsDiv.innerHTML = `
                        <button class="btn-round btn-minus" onclick="CartManager.removeItem(${dishId})">‚àí</button>
                        <span class="quantity-display">${quantity}</span>
                        <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})">+</button>
                    `;
                } else {
                    actionsDiv.innerHTML = `
                        <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})">+</button>
                    `;
                }
            }
        });
    }

    static setTable(tableId) {
        this.tableId = tableId;
        
        if (this.currentTableNumber) {
            this.currentTableNumber.textContent = tableId;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        StorageManager.set('tableId', tableId);
        
        NotificationManager.showSuccess(`–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª #${tableId}`);
    }

    static openBonusCard() {
        ModalManager.openBonusCard((cardData) => {
            this.bonusCard = cardData;
            this.render();
            NotificationManager.showSuccess(`–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! –°–∫–∏–¥–∫–∞ ${cardData.discount_percent}%`);
        });
    }

    static async proceedToOrder() {
        if (this.items.size === 0) {
            NotificationManager.showWarning('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            const orderData = {
                table_id: this.tableId,
                items: Array.from(this.items.entries()).map(([dishId, quantity]) => ({
                    dish_id: dishId,
                    quantity: quantity
                })),
                bonus_card: this.bonusCard ? this.bonusCard.card_number : null,
                language: MenuPage.currentLanguage || 'ru'
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            APIUtils.showLoading(document.querySelector('.continue-order-btn'), '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...');
            
            const response = await ClientAPI.createOrder(orderData);
            
            if (response.status === 'success') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                ModalManager.openOrderConfirmation(response.data);
                
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                this.items.clear();
                this.bonusCard = null;
                this.render();
                this.updateDishButtons();
                
                NotificationManager.showSuccess('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
            }
            
        } catch (error) {
            APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
        } finally {
            APIUtils.hideLoading(document.querySelector('.continue-order-btn'));
        }
    }

    static getDishById(dishId) {
        if (!window.MenuPage || !window.MenuPage.menuData) return null;
        return window.MenuPage.menuData.dishes.find(dish => dish.id === dishId);
    }

    static triggerUpdate() {
        document.dispatchEvent(new CustomEvent('cartUpdated', {
            detail: {
                items: this.items,
                total: this.getTotal(),
                count: this.getTotalItems()
            }
        }));
    }

    static saveToStorage() {
        const cartData = {
            items: Array.from(this.items.entries()),
            tableId: this.tableId,
            bonusCard: this.bonusCard,
            timestamp: Date.now()
        };
        StorageManager.set('cart', cartData);
    }

    static loadFromStorage() {
        const cartData = StorageManager.get('cart');
        if (cartData && cartData.timestamp) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (24 —á–∞—Å–∞)
            const isExpired = Date.now() - cartData.timestamp > 24 * 60 * 60 * 1000;
            
            if (!isExpired) {
                this.items = new Map(cartData.items || []);
                this.tableId = cartData.tableId || this.tableId;
                this.bonusCard = cartData.bonusCard || null;
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–æ–ª
        const savedTableId = StorageManager.get('tableId');
        if (savedTableId) {
            this.tableId = savedTableId;
        }
    }

    static escapeHTML(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    static getCartData() {
        return {
            items: Array.from(this.items.entries()),
            tableId: this.tableId,
            bonusCard: this.bonusCard,
            subtotal: this.getSubtotal(),
            serviceCharge: this.getServiceCharge(),
            discount: this.getDiscount(),
            total: this.getTotal(),
            totalItems: this.getTotalItems()
        };
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    static applyBonusCard(bonusData) {
        this.bonusCard = bonusData;
        this.saveToStorage();
        this.render();
        Utils.showToast(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${bonusData.discount_percent}%!`, 'success');
    }

    static removeBonusCard() {
        this.bonusCard = null;
        this.saveToStorage();
        this.render();
        Utils.showToast('–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞', 'info');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–æ–ª–∞–º–∏
    static setTable(tableId) {
        this.tableId = tableId;
        StorageManager.set('tableId', tableId);
        this.saveToStorage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const tableBtn = document.getElementById('tableSelectBtn');
        const tableNumber = document.getElementById('currentTableNumber');
        if (tableBtn && tableNumber) {
            tableNumber.textContent = tableId;
            tableBtn.classList.add('selected');
        }
        
        Utils.showToast(`–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª ‚Ññ${tableId}`, 'success');
    }

    static getCurrentTableId() {
        return this.tableId;
    }

    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    static async placeOrder() {
        if (!this.tableId) {
            Utils.showToast('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª', 'warning');
            return;
        }

        if (this.items.size === 0) {
            Utils.showToast('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'warning');
            return;
        }

        try {
            const orderData = {
                table_id: this.tableId,
                items: Array.from(this.items.values()),
                bonus_card: this.bonusCard,
                subtotal: this.getSubtotal(),
                service_charge: this.getServiceCharge(),
                discount: this.getDiscount(),
                total: this.getTotal()
            };

            const response = await ClientAPI.createOrder(orderData);
            
            if (response.status === 'success') {
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                this.clear();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                ModalManager.openOrderConfirmation(response.data);
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
            }
            
        } catch (error) {
            console.error('Order placement error:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.CartManager = CartManager;