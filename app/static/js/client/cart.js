/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
 */

class CartManager {
    static init() {
    
        
        this.items = new Map();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º tableId –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.tableId = window.CLIENT_CONFIG?.tableId || 1;
        this.tableNumber = window.CLIENT_CONFIG?.tableNumber || 1;
        this.bonusCard = null;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadSettings();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
        this.loadFromStorage();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.initializeElements();
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–æ–ª—å–∫–æ id
        this.ensureTableNumberConsistency();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupEventListeners();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ—Ä–∑–∏–Ω—É
        this.render();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üõí CartManager initialized with tableId:', this.tableId);

    }

    static loadSettings() {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const config = window.CLIENT_CONFIG || {};
        const settings = config.settings || {};
        
        // –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä
        this.serviceChargePercent = settings.service_charge || 5;
        this.serviceChargeEnabled = settings.service_charge_enabled !== 'false';
        
        // –í–∞–ª—é—Ç–∞
        this.currency = settings.currency || 'TMT';
        this.currencySymbol = this.getCurrencySymbol(this.currency);
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        this.restaurantName = settings.restaurant_name || 'DENIZ Restaurant';
        

    }
    
    static getCurrencySymbol(currency) {
        const symbols = {
            'TMT': '—Ç–º—Ç',
            'RUB': '‚ÇΩ',
            'USD': '$',
            'EUR': '‚Ç¨'
        };
        return symbols[currency] || currency;
    }

    static initializeElements() {
        this.cartContent = document.getElementById('cartContent');
        this.cartFooter = document.getElementById('cartFooter');
        this.clearCartBtn = document.getElementById('clearCartBtn');
        this.tableSelectBtn = document.getElementById('tableSelectBtn');
        this.currentTableNumber = document.getElementById('currentTableNumber');
    }

    static setupEventListeners() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if (this.clearCartBtn) {
            this.clearCartBtn.addEventListener('click', () => {
                this.clear();
            });
        }

        // –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ base.html –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        document.addEventListener('cartUpdated', () => {
            this.render();
            this.saveToStorage();
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        window.addEventListener('beforeunload', () => {
            this.saveToStorage();
        });
    }

    static async addItem(dishId, quantity = 1) {
        console.log('üõí CartManager.addItem called:', { dishId, quantity, currentItems: Array.from(this.items.entries()) });
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é
            const dish = await this.getDishById(dishId);
            if (!dish) {
                NotificationManager.showError('–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const currentQuantity = this.items.get(dishId) || 0;
            const newQuantity = currentQuantity + quantity;
            
            console.log('üõí Quantity calculation:', { currentQuantity, newQuantity });
            
            if (newQuantity <= 0) {
                this.removeItem(dishId);
                return;
            }

            this.items.set(dishId, newQuantity);
            
            console.log('üõí Item added, new cart state:', Array.from(this.items.entries()));
            
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await this.triggerUpdate();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            NotificationManager.showSuccess(`${dish.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É`);
            
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –±–ª—é–¥
        await this.updateDishButtons();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveToStorage();
        } catch (error) {
            console.error('üõí Error adding item:', error);
            NotificationManager.showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞');
        }
    }

    static async removeItem(dishId, quantity = 1) {
        
        const currentQuantity = this.items.get(dishId) || 0;
        const newQuantity = currentQuantity - quantity;
        
        if (newQuantity <= 0) {
            this.items.delete(dishId);
        } else {
            this.items.set(dishId, newQuantity);
        }
        
        await this.triggerUpdate();
        await this.updateDishButtons();
    }

    static async setItemQuantity(dishId, quantity) {
        if (quantity <= 0) {
            this.items.delete(dishId);
        } else {
            this.items.set(dishId, quantity);
        }
        
        await this.triggerUpdate();
        await this.updateDishButtons();
    }

    static getItemQuantity(dishId) {
        return this.items.get(dishId) || 0;
    }

        static clear() {
        if (this.items.size === 0) {
            NotificationManager.showInfo('–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ModalManager.showConfirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?', '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', async () => {
            this.items.clear();
            this.bonusCard = null;
            await this.triggerUpdate();
            await this.updateDishButtons();
            NotificationManager.showSuccess('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
        });
    }

    static getTotalItems() {
        let total = 0;
        this.items.forEach(quantity => {
            total += quantity;
        });
        return total;
    }

    static async getSubtotal() {
        let subtotal = 0;
        for (const [dishId, quantity] of this.items.entries()) {
            const dish = await this.getDishById(dishId);
            if (dish) {
                subtotal += dish.price * quantity;
            }
        }
        return subtotal;
    }

    static async getServiceCharge() {
        if (!this.serviceChargeEnabled) return 0;
        const subtotal = await this.getSubtotal();
        return subtotal * (this.serviceChargePercent / 100);
    }

    static async getDiscount() {
        if (!this.bonusCard) return 0;
        
        // –ü–æ–ª—É—á–∞–µ–º discount_percent –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        const discountPercent = this.bonusCard.discount_percent || 
                              (this.bonusCard.card && this.bonusCard.card.discount_percent);
        
        if (!discountPercent) return 0;
        
        // –°–∫–∏–¥–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç (–ø–æ–¥—ã—Ç–æ–≥ + —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä)
        const subtotal = await this.getSubtotal();
        const serviceCharge = await this.getServiceCharge();
        const totalBeforeDiscount = subtotal + serviceCharge;
        
        return totalBeforeDiscount * (discountPercent / 100);
    }

    static async getTotal() {
        try {
            const subtotal = await this.getSubtotal();
            const serviceCharge = await this.getServiceCharge();
            
            // –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –¥–æ —Å–∫–∏–¥–∫–∏
            const totalBeforeDiscount = subtotal + serviceCharge;
            
            // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
            let discount = 0;
            if (this.bonusCard) {
                const discountPercent = this.bonusCard.discount_percent || 
                                      (this.bonusCard.card && this.bonusCard.card.discount_percent);
                if (discountPercent) {
                    discount = totalBeforeDiscount * (discountPercent / 100);
                }
            }
            
            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: (–ø–æ–¥—ã—Ç–æ–≥ + —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä) - —Å–∫–∏–¥–∫–∞
            const total = totalBeforeDiscount - discount;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if (isNaN(total) || total < 0) {
                console.error('Invalid total calculation:', { subtotal, serviceCharge, discount, total });
                return totalBeforeDiscount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            }
            
            return total;
        } catch (error) {
            console.error('Error calculating total:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—ã—Ç–æ–≥ + —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä
            const subtotal = await this.getSubtotal();
            const serviceCharge = await this.getServiceCharge();
            return subtotal + serviceCharge;
        }
    }

    static async render() {
        console.log('üõí CartManager.render called, items count:', this.items.size, 'items:', Array.from(this.items.entries()));
        if (!this.cartContent) return;

        if (this.items.size === 0) {
            this.renderEmpty();
        } else {
            await this.renderItems();
        }
    }

    static renderEmpty() {
        this.cartContent.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-illustration">
                    <img src="/static/assets/images/fish.png" alt="–†—ã–±–∞" class="fish-image">
                </div>
                <p class="empty-cart-text">
                    <strong>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–æ –º–æ—Ä–µ –ø–æ–ª–Ω–æ–µ.</strong><br>
                    –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–µ–Ω—é ‚Äî —Ç–∞–º –≤–æ–ª–Ω—ã –≤–∫—É—Å–∞.
                </p>
            </div>
            <div class="rudder-pattern"></div>
        `;
        
        if (this.cartFooter) {
            this.cartFooter.style.display = 'none';
        }
    }

    static async renderItems() {
        try {
            const itemsHTMLPromises = Array.from(this.items.entries()).map(async ([dishId, quantity]) => {
                const dish = await this.getDishById(dishId);
                if (!dish) {
                    console.warn('üõí Dish not found for rendering, dishId:', dishId);
                    return '';
                }
                
                return `
                    <div class="cart-item" data-dish-id="${dishId}">
                        <button class="cart-item-remove" onclick="CartManager.removeItem(${dishId}, ${quantity})" title="–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ">√ó</button>
                        
                        <img class="cart-item-image" 
                             src="${dish.image_url || '/static/assets/images/fish.png'}" 
                             alt="${this.escapeHTML(dish.name)}">
                        
                        <div class="cart-item-info">
                            <div class="cart-item-name">${this.escapeHTML(dish.name)}</div>
                            <div class="cart-item-price">${APIUtils.formatPrice(dish.price)}</div>
                        </div>
                        
                        <div class="cart-item-controls">
                            <button class="btn-round btn-minus" onclick="CartManager.removeItem(${dishId})" title="–£–±—Ä–∞—Ç—å –æ–¥–Ω–æ">‚àí</button>
                            <span class="quantity-display">${quantity}</span>
                            <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})" title="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ">+</button>
                        </div>
                    </div>
                `;
            });
            
            const itemsHTML = await Promise.all(itemsHTMLPromises);
            const filteredItemsHTML = itemsHTML.filter(html => html !== '');

            this.cartContent.innerHTML = `
                <div class="cart-items">
                    ${filteredItemsHTML.join('')}
                </div>
                <div class="rudder-pattern"></div>
            `;

            await this.renderFooter();
        } catch (error) {
            console.error('üõí Error rendering items:', error);
            this.renderEmpty();
        }
    }

    static async renderFooter() {
        if (!this.cartFooter) return;

        const subtotal = await this.getSubtotal();
        const serviceCharge = await this.getServiceCharge();
        const discount = await this.getDiscount();
        const total = await this.getTotal();

        console.log('üõí renderFooter debug:', { 
            subtotal, 
            serviceCharge, 
            discount, 
            total, 
            bonusCard: this.bonusCard 
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ —Å–∫–∏–¥–∫–∞ –±–æ–ª—å—à–µ 0
        const discountHTML = (this.bonusCard && discount > 0) ? `
            <div class="summary-line discount">
                <span class="summary-label">–°–∫–∏–¥–∫–∞ -${this.bonusCard.discount_percent || (this.bonusCard.card && this.bonusCard.card.discount_percent)}%</span>
                <span class="summary-value">-${APIUtils.formatPrice(discount)}</span>
            </div>
        ` : '';

        this.cartFooter.innerHTML = `
            <div class="cart-summary">
                <div class="summary-line subtotal">
                    <span class="summary-label">–ü–æ–¥—ã—Ç–æ–≥</span>
                    <span class="summary-value">${APIUtils.formatPrice(subtotal)}</span>
                </div>
                
                ${this.serviceChargeEnabled ? `
                <div class="summary-line service-charge">
                    <span class="summary-label">–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä ${this.serviceChargePercent}%</span>
                    <span class="summary-value">${APIUtils.formatPrice(serviceCharge)}</span>
                </div>
                ` : ''}
                
                ${discountHTML}
                
                <div class="summary-line total">
                    <span class="summary-label">–ò—Ç–æ–≥–æ</span>
                    <span class="summary-value">${APIUtils.formatPrice(total)}</span>
                </div>
            </div>
            
            <button class="btn bonus-card-btn" onclick="CartManager.openBonusCard()">
                ${this.bonusCard ? 'üí≥ –ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞' : 'üí≥ –ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞'}
            </button>
            
            <button class="btn btn-primary continue-order-btn" onclick="CartManager.proceedToOrder()">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
        `;

        this.cartFooter.style.display = 'block';
    }

    static async updateDishButtons() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –±–ª—é–¥
            const dishCards = document.querySelectorAll('.dish-card');
            
            for (const card of dishCards) {
                const dishId = parseInt(card.dataset.dishId);
                const quantity = this.getItemQuantity(dishId);
                const actionsDiv = card.querySelector('.dish-footer .dish-actions');
                
                if (actionsDiv) {
                    if (quantity > 0) {
                        actionsDiv.innerHTML = `
                            <button class="btn-round btn-minus" onclick="CartManager.removeItem(${dishId})">‚àí</button>
                            <span class="quantity-display">${quantity}</span>
                            <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})">+</button>
                        `;
                    } else {
                        actionsDiv.innerHTML = `
                            <button class="btn-round btn-plus" onclick="CartManager.addItem(${dishId})">+</button>
                        `;
                    }
                }
            }
        } catch (error) {
            console.error('üõí Error updating dish buttons:', error);
        }
    }

    static setTable(tableId, tableNumber) {
        // tableId –∑–¥–µ—Å—å - —ç—Ç–æ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3), –∞ –Ω–µ ID –∏–∑ –ë–î
        this.tableId = tableNumber || tableId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
        this.tableNumber = tableNumber || tableId;
        
        console.log('üõí setTable called with:', { tableId, tableNumber, finalTableId: this.tableId });
        
        if (this.currentTableNumber) {
            this.currentTableNumber.textContent = this.tableNumber;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        StorageManager.set('tableId', this.tableId);
        StorageManager.set('tableNumber', this.tableNumber);
        
        NotificationManager.showSuccess(`–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª #${this.tableNumber}`);
    }

    static getCurrentTableId() {
        console.log('üîç getCurrentTableId called, current tableId:', this.tableId);
        return this.tableId;
    }

    static openBonusCard() {
        ModalManager.openBonusCard((cardData) => {
            this.bonusCard = cardData;
            this.render();
            NotificationManager.showSuccess(`–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! –°–∫–∏–¥–∫–∞ ${cardData.discount_percent}%`);
        });
    }

    static async proceedToOrder() {
        if (this.items.size === 0) {
            NotificationManager.showWarning('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å—Ç–æ–ª
        if (!this.tableId) {
            NotificationManager.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞');
            return;
        }

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            const orderData = {
                table_id: this.tableId,
                items: Array.from(this.items.entries()).map(([dishId, quantity]) => ({
                    dish_id: dishId,
                    quantity: quantity
                })),
                bonus_card: this.bonusCard ? this.bonusCard.card_number : null,
                language: window.MenuManager?.currentLanguage || 'ru'
            };

            console.log('üõí Order data prepared:', orderData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API
            if (!window.ClientAPI || typeof window.ClientAPI.createOrder !== 'function') {
                throw new Error('API –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            APIUtils.showLoading(document.querySelector('.continue-order-btn'), '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...');
            
            const response = await window.ClientAPI.createOrder(orderData);
            
            if (response.status === 'success') {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –º–æ–¥–∞–ª–∫–∏
                const orderInfo = {
                    order_id: response.data.order_id || response.data.id,
                    table_id: this.tableId,
                    items: Array.from(this.items.entries()),
                    total: await this.getTotal()
                };
                
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                this.items.clear();
                this.bonusCard = null;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                this.saveToStorage();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.render();
                await this.updateDishButtons();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å —Ç–∞–π–º–µ—Ä–æ–º
                if (window.ModalManager && typeof window.ModalManager.openOrderConfirmation === 'function') {
                    window.ModalManager.openOrderConfirmation(orderInfo);
                } else {
                    NotificationManager.showSuccess('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                }
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
            }
            
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–∫–∞–∑–µ
            if (error.message && error.message.includes('—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑')) {
                ModalManager.showExistingOrderModal(error.message);
            } else {
                APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
            }
        } finally {
            APIUtils.hideLoading(document.querySelector('.continue-order-btn'));
        }
    }

    static async getDishById(dishId) {
        if (!window.MenuManager) {
            console.log('üõí MenuManager not ready, dishId:', dishId);
            return null;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é
        if (window.MenuManager.menuData && window.MenuManager.menuData.dishes) {
            const dish = window.MenuManager.menuData.dishes.find(dish => dish.id === dishId);
            if (dish) {
                console.log('üõí getDishById found in current menu:', { dishId, dish });
                return dish;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞
        console.log('üõí Dish not found in current menu, loading all dishes for dishId:', dishId);
        const allDishesData = await window.MenuManager.loadAllDishes();
        
        if (allDishesData && allDishesData.dishes) {
            const dish = allDishesData.dishes.find(dish => dish.id === dishId);
            console.log('üõí getDishById result from all dishes:', { dishId, dish });
            return dish;
        }
        
        console.log('üõí Dish not found anywhere, dishId:', dishId);
        return null;
    }

    static async triggerUpdate() {
        document.dispatchEvent(new CustomEvent('cartUpdated', {
            detail: {
                items: this.items,
                total: await this.getTotal(),
                count: this.getTotalItems()
            }
        }));
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é
    static async updateAfterMenuLoad() {
        console.log('üõí Updating cart after menu load, current items:', Array.from(this.items.entries()));
        await this.render();
        await this.updateDishButtons();
    }

    static saveToStorage() {
        const cartData = {
            items: Array.from(this.items.entries()),
            tableId: this.tableId,
            bonusCard: this.bonusCard,
            timestamp: Date.now()
        };
        StorageManager.set('cart', cartData);
    }

    static loadFromStorage() {
        console.log('üõí CartManager.loadFromStorage called');
        const cartData = StorageManager.get('cart');
        console.log('üõí Cart data from storage:', cartData);
        
        if (cartData && cartData.timestamp) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (24 —á–∞—Å–∞)
            const isExpired = Date.now() - cartData.timestamp > 24 * 60 * 60 * 1000;
            console.log('üõí Cart data expired:', isExpired);
            
            if (!isExpired) {
                this.items = new Map(cartData.items || []);
                this.tableId = cartData.tableId || this.tableId;
                this.tableNumber = StorageManager.get('tableNumber') || this.tableId;
                this.bonusCard = cartData.bonusCard || null;
                console.log('üõí Cart loaded from storage:', Array.from(this.items.entries()));
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–æ–ª
        const savedTableId = StorageManager.get('tableId');
        const savedTableNumber = StorageManager.get('tableNumber');
        if (savedTableId) {
            this.tableId = parseInt(savedTableId, 10);
        }
        if (savedTableNumber) {
            this.tableNumber = parseInt(savedTableNumber, 10);
        } else {
            // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É —Å—Ç–æ–ª–æ–≤
            this.tableNumber = undefined;
        }
        
        console.log('üõí Final cart state after loading:', Array.from(this.items.entries()));
    }

    static async ensureTableNumberConsistency() {
        try {
            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–±–Ω–æ–≤–∏–º DOM –∏ –≤—ã–π–¥–µ–º
            if (typeof this.tableNumber === 'number' && !Number.isNaN(this.tableNumber)) {
                if (this.currentTableNumber) this.currentTableNumber.textContent = this.tableNumber;
                return;
            }

            // –ï—Å–ª–∏ id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (!this.tableId) return;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ id ‚Üí table_number
            if (window.ClientAPI && typeof window.ClientAPI.getTables === 'function') {
                const resp = await window.ClientAPI.getTables();
                if (resp && resp.status === 'success' && resp.data && Array.isArray(resp.data.tables)) {
                    const t = resp.data.tables.find(t => t.id === this.tableId);
                    if (t) {
                        this.tableNumber = t.table_number;
                        StorageManager.set('tableNumber', this.tableNumber);
                        if (this.currentTableNumber) this.currentTableNumber.textContent = this.tableNumber;
                        NotificationManager.showInfo(`–í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª #${this.tableNumber}`);
                    }
                }
            }
        } catch (e) {
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å UX
        }
    }

    static escapeHTML(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    static async getCartData() {
        return {
            items: Array.from(this.items.entries()),
            tableId: this.tableId,
            bonusCard: this.bonusCard,
            subtotal: await this.getSubtotal(),
            serviceCharge: await this.getServiceCharge(),
            discount: await this.getDiscount(),
            total: await this.getTotal(),
            totalItems: this.getTotalItems()
        };
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    static applyBonusCard(bonusData) {
        this.bonusCard = bonusData;
        this.saveToStorage();
        this.render();
        NotificationManager.showSuccess(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${bonusData.discount_percent}%!`);
    }

    static removeBonusCard() {
        this.bonusCard = null;
        this.saveToStorage();
        this.render();
        NotificationManager.showInfo('–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
    }

    // –ú–µ—Ç–æ–¥—ã –Ω–∏–∂–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ: setTable, getCurrentTableId, placeOrder

    // –î–æ–±–∞–≤–∏—Ç—å –≤ CartManager:

    static setBonusCard(bonusCardData) {
        this.bonusCard = bonusCardData;
        console.log('üõí Bonus card set:', this.bonusCard);
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å –Ω–æ–≤–æ–π —Å–∫–∏–¥–∫–æ–π
        this.render();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveToStorage();
    }

    static clearBonusCard() {
        this.bonusCard = null;
        console.log('üõí Bonus card cleared');
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ —Å–∫–∏–¥–∫–∏
        this.render();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveToStorage();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.CartManager = CartManager;