/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
 */

class ModalManager {
    static currentOrderData = null;
    static globalOrderTimer = null;
    static orderTimerData = null;
    
    static init() {

        
        this.activeModal = null;
        this.overlay = null;
        this.callbacks = new Map();
        
        this.createOverlay();
        this.setupEventListeners();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        this.restoreOrderTimerFromStorage();

    }

    static createOverlay() {
        this.overlay = document.getElementById('modalOverlay');
        if (!this.overlay) {
            this.overlay = document.createElement('div');
            this.overlay.id = 'modalOverlay';
            this.overlay.className = 'modal-overlay';
            document.body.appendChild(this.overlay);
        }
    }

    static setupEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        this.overlay.addEventListener('click', (e) => {
            if (e.target === this.overlay) {
                this.closeActive();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.activeModal) {
                this.closeActive();
            }
        });
    }

    static show(content, options = {}) {
        const modalId = Date.now() + Math.random();
        
        const modal = this.createModal(modalId, content, options);
        this.overlay.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
        this.overlay.classList.add('show');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            modal.classList.add('modal-animate-in');
        }, 10);
        
        this.activeModal = { id: modalId, element: modal, options };
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = 'hidden';
        
        return modalId;
    }

    static createModal(id, content, options) {
        const modal = document.createElement('div');
        modal.className = `modal ${options.className || ''}`;
        modal.setAttribute('data-modal-id', id);
        
        modal.innerHTML = content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if (!options.hideClose) {
            this.addCloseButton(modal);
        }
        
        return modal;
    }

    static addCloseButton(modal) {
        if (!modal.querySelector('.modal-close')) {
            const closeBtn = document.createElement('button');
            closeBtn.className = 'modal-close';
            closeBtn.innerHTML = `
                <svg viewBox="0 0 24 24" width="16" height="16">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
            `;
            closeBtn.addEventListener('click', () => this.closeActive());
            modal.appendChild(closeBtn);
        }
    }

    static closeActive() {
        if (!this.activeModal) return;
        
        const { element, options } = this.activeModal;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        element.classList.remove('modal-animate-in');
        element.classList.add('modal-animate-out');
        
        setTimeout(() => {
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º overlay –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            if (this.overlay.children.length === 0) {
                this.overlay.classList.remove('show');
                document.body.style.overflow = '';
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (options.onClose) {
                options.onClose();
            }
            
            this.activeModal = null;
        }, 300);
    }

    static closeAll() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.activeModal) {
            const { element } = this.activeModal;
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }
            this.activeModal = null;
        }
        
        // –û—á–∏—â–∞–µ–º overlay
        this.overlay.innerHTML = '';
        this.overlay.classList.remove('show');
        document.body.style.overflow = '';
    }

    // PIN-–∫–æ–¥ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    static openPinEntry(callback, title = "–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω –∫–æ–¥") {
        let pinValue = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        const t = window.CURRENT_TRANSLATIONS || {
            'enter-pin': '–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–∞–º',
            'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
        };
        
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">${title}</h2>
            </div>
            <div class="modal-content">
                <div class="pin-display" id="pinDisplay">
                    <span id="pinValue"></span>
                    <button class="pin-delete" id="pinDelete" style="display: none;">√ó</button>
                </div>
                <div class="pin-keypad">
                    ${[1,2,3,4,5,6,7,8,9].map(num => 
                        `<button class="pin-key" data-digit="${num}">${num}</button>`
                    ).join('')}
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="pinConfirm" disabled>${t['confirm']}</button>
            </div>
        `;
        
        const modalId = this.show(content, { className: 'pin-modal' });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
        const pinDisplay = modal.querySelector('#pinValue');
        const pinDelete = modal.querySelector('#pinDelete');
        const pinConfirm = modal.querySelector('#pinConfirm');
        
        // –ö–ª–∏–∫–∏ –ø–æ —Ü–∏—Ñ—Ä–∞–º
        modal.querySelectorAll('.pin-key').forEach(key => {
            key.addEventListener('click', () => {
                const digit = key.dataset.digit;
                if (pinValue.length < 6) {
                    pinValue += digit;
                    this.updatePinDisplay(pinDisplay, pinDelete, pinConfirm, pinValue);
                }
            });
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
        pinDelete.addEventListener('click', () => {
            pinValue = pinValue.slice(0, -1);
            this.updatePinDisplay(pinDisplay, pinDelete, pinConfirm, pinValue);
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        pinConfirm.addEventListener('click', () => {
            callback(pinValue);
            this.closeActive();
        });
        
        return modalId;
    }

    static updatePinDisplay(display, deleteBtn, confirmBtn, value) {
        display.textContent = value;
        deleteBtn.style.display = value.length > 0 ? 'block' : 'none';
        confirmBtn.disabled = value.length === 0;
    }

    // –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
    static openTableSelection(currentTableId, callback) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        const t = window.CURRENT_TRANSLATIONS || {
            'select-table': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª'
        };
        
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">${t['select-table']}</h2>
            </div>
            <div class="modal-content">
                <div class="tables-grid" id="tablesGrid">
                    <!-- –°—Ç–æ–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>
        `;
        
        const modalId = this.show(content, { className: 'table-modal' });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ª—ã
        this.loadTables(modalId, currentTableId, callback);
        
        return modalId;
    }

    static async loadTables(modalId, currentTableId, callback) {
        try {
            console.log('üè™ Loading tables...');
            console.log('üîß ClientAPI available:', typeof window.ClientAPI);
            console.log('üîß ClientAPI.getTables available:', typeof window.ClientAPI?.getTables);
            
            if (!window.ClientAPI || typeof window.ClientAPI.getTables !== 'function') {
                throw new Error('ClientAPI.getTables is not available');
            }
            
            const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
            const grid = modal.querySelector('#tablesGrid');
            
            const response = await window.ClientAPI.getTables();
            
            if (response.status === 'success') {
                const tables = response.data.tables;
                
                // –£–º–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                const totalTables = tables.length;
                let columns;
                
                if (totalTables <= 6) {
                    columns = 3; // 1-6 —Å—Ç–æ–ª–æ–≤: 3 –∫–æ–ª–æ–Ω–∫–∏
                } else if (totalTables <= 10) {
                    columns = 5; // 7-10 —Å—Ç–æ–ª–æ–≤: 5 –∫–æ–ª–æ–Ω–æ–∫ (10 = 2 —Ä—è–¥–∞ –ø–æ 5)
                } else if (totalTables <= 15) {
                    columns = 5; // 11-15 —Å—Ç–æ–ª–æ–≤: 5 –∫–æ–ª–æ–Ω–æ–∫ (12 = 3 —Ä—è–¥–∞: 5+5+2)
                } else if (totalTables <= 20) {
                    columns = 5; // 16-20 —Å—Ç–æ–ª–æ–≤: 5 –∫–æ–ª–æ–Ω–æ–∫ (20 = 4 —Ä—è–¥–∞ –ø–æ 5)
                } else if (totalTables <= 28) {
                    columns = 7; // 21-28 —Å—Ç–æ–ª–æ–≤: 7 –∫–æ–ª–æ–Ω–æ–∫
                } else {
                    columns = 8; // >28 —Å—Ç–æ–ª–æ–≤: 8 –∫–æ–ª–æ–Ω–æ–∫
                }
                
                grid.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;
                console.log(`üìê Tables: ${totalTables}, Columns: ${columns}, Layout: ${Math.ceil(totalTables/columns)} rows`);
                
                grid.innerHTML = tables.map(table => `
                    <button class="table-option ${table.table_number === currentTableId ? 'selected' : ''} ${!table.is_available ? 'occupied' : ''}"
                            data-table-id="${table.id}"
                            data-table-number="${table.table_number}"
                            ${!table.is_available ? 'disabled' : ''}>
                        ${table.table_number}
                    </button>
                `).join('');
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
                grid.querySelectorAll('.table-option:not(.occupied)').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const tableId = parseInt(btn.dataset.tableId, 10); // ID –∏–∑ –ë–î (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                        const tableNumber = parseInt(btn.dataset.tableNumber, 10); // –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞
                        
                        console.log('ü™ë Table selected:', { tableId, tableNumber });
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª
                        grid.querySelectorAll('.table-option').forEach(b => b.classList.remove('selected'));
                        btn.classList.add('selected');
                        
                        // –í—ã–∑—ã–≤–∞–µ–º callback –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        setTimeout(() => {
                            if (callback) callback(tableNumber, tableNumber); // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
                            this.closeActive();
                        }, 300);
                    });
                });
            } else {
                throw new Error(response.message);
            }
            
        } catch (error) {
            APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª—ã');
            this.closeActive();
        }
    }

    // –ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞
    static openBonusCard(callback) {
        let cardNumber = '';
        
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</h2>
            </div>
            <div class="modal-content">
                <div class="card-number-display" id="cardDisplay">
                    <span id="cardValue"></span>
                    <button class="card-delete" id="cardDelete" style="display: none;">√ó</button>
                </div>
                <div class="pin-keypad">
                    ${[1,2,3,4,5,6,7,8,9,0].map(num => 
                        `<button class="pin-key" data-digit="${num}">${num}</button>`
                    ).join('')}
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="ModalManager.closeActive()">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-primary" id="cardConfirm" disabled>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
            </div>
        `;
        
        const modalId = this.show(content, { className: 'bonus-modal' });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
        const cardDisplay = modal.querySelector('#cardValue');
        const cardDelete = modal.querySelector('#cardDelete');
        const cardConfirm = modal.querySelector('#cardConfirm');
        
        // –ö–ª–∏–∫–∏ –ø–æ —Ü–∏—Ñ—Ä–∞–º
        modal.querySelectorAll('.pin-key').forEach(key => {
            key.addEventListener('click', () => {
                const digit = key.dataset.digit;
                if (cardNumber.length < 6) {
                    cardNumber += digit;
                    this.updateCardDisplay(cardDisplay, cardDelete, cardConfirm, cardNumber);
                }
            });
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
        cardDelete.addEventListener('click', () => {
            cardNumber = cardNumber.slice(0, -1);
            this.updateCardDisplay(cardDisplay, cardDelete, cardConfirm, cardNumber);
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        cardConfirm.addEventListener('click', async () => {
            try {
                APIUtils.showLoading(cardConfirm, '–ü—Ä–æ–≤–µ—Ä—è–µ–º...');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ClientAPI
                if (!window.ClientAPI || typeof window.ClientAPI.verifyBonusCard !== 'function') {
                    throw new Error('API –Ω–µ –≥–æ—Ç–æ–≤');
                }
                
                const response = await window.ClientAPI.verifyBonusCard(cardNumber);
                
                if (response.status === 'success') {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É –∫ –∫–æ—Ä–∑–∏–Ω–µ
                    if (window.CartManager && typeof window.CartManager.setBonusCard === 'function') {
                        window.CartManager.setBonusCard(response.data);
                    }
                    
                    callback(response.data);
                    this.closeActive();
                    const t = window.CURRENT_TRANSLATIONS || { 'bonus-card-applied': '–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!' };
                    NotificationManager.showSuccess(t['bonus-card-applied']);
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
                    const errorMessage = response.data.reason || response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    NotificationManager.showError(errorMessage);
                }
                
            } catch (error) {
                APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É');
            } finally {
                APIUtils.hideLoading(cardConfirm);
            }
        });
        
        return modalId;
    }

    static updateCardDisplay(display, deleteBtn, confirmBtn, value) {
        display.textContent = value;
        deleteBtn.style.display = value.length > 0 ? 'block' : 'none';
        confirmBtn.disabled = value.length !== 6;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    static openOrderConfirmation(orderData) {
        this.currentOrderData = orderData;
        
        const timeoutSeconds = window.CLIENT_SETTINGS?.order_cancel_timeout || 300;
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤—Ä–µ–º—è
        if (this.orderTimerData && this.orderTimerData.orderId === orderData.order_id) {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #' + orderData.order_id + ', –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ' + this.orderTimerData.remainingTime + '—Å');
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
            this.startGlobalOrderTimer(orderData.order_id, timeoutSeconds);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        const t = window.CURRENT_TRANSLATIONS || {
            'order-accepted': '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!',
            'order-number': '–ó–∞–∫–∞–∑ ‚Ññ',
            'order-cancel-time': '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏:',
            'order-confirm-warning': '‚ö†Ô∏è –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
            'order-auto-confirm-info': '–ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è, –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç',
            'close': '–ó–∞–∫—Ä—ã—Ç—å',
            'cancel-remove': '–û—Ç–º–µ–Ω–∏—Ç—å/—É–±—Ä–∞—Ç—å',
            'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
        };
        
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">${t['order-accepted']}</h2>
            </div>
            <div class="modal-content">
                <div class="order-success-icon">‚úÖ</div>
                <div class="order-message">${t['order-number']}${orderData.order_id || '0000'}</div>
                <div class="order-submessage">
                    ${t['order-cancel-time']}
                </div>
                <div class="countdown-timer" id="countdownTimer">${this.formatTime(this.orderTimerData.remainingTime)}</div>
                
                <div class="order-warning" style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 12px; margin: 15px 0; font-size: 14px; line-height: 1.4;">
                    <div style="color: #856404; margin-bottom: 8px;">${t['order-confirm-warning']}</div>
                    <div style="color: #6c757d; font-size: 12px;">${t['order-auto-confirm-info']}</div>
                </div>
                
                <div class="order-actions">
                    <button class="btn" style="width: 100%; background: var(--ocean-green); color: var(--white);" onclick="confirmOrder()">${t['confirm']}</button>
                    <button class="btn" style="background: var(--minus-btn); color: var(--white); width: 100%;" id="cancelOrderBtn">
                        ${t['cancel-remove']}
                    </button>
                </div>
            </div>
        `;
        
        const modalId = this.show(content, { 
            className: 'order-confirmation-modal',
            hideClose: false,
            onClose: () => {
                console.log('üì± –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
                // –ù–µ –æ—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            }
        });
        
        const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
        const timer = modal.querySelector('#countdownTimer');
        const cancelBtn = modal.querySelector('#cancelOrderBtn');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        const uiUpdateInterval = setInterval(() => {
            if (!this.orderTimerData) {
                clearInterval(uiUpdateInterval);
                return;
            }
            
            const remainingTime = this.orderTimerData.remainingTime;
            const formattedTime = this.formatTime(remainingTime);
            
            if (timer) {
                timer.textContent = formattedTime;
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–∞–π–º–µ—Ä–∞
                if (remainingTime <= 60) {
                    timer.className = 'countdown-timer danger';
                } else if (remainingTime <= 120) {
                    timer.className = 'countdown-timer warning';
                }
            }
            
            if (cancelBtn && remainingTime <= 0) {
                cancelBtn.disabled = true;
                cancelBtn.textContent = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
                if (timer) timer.textContent = '0:00';
                clearInterval(uiUpdateInterval);
            }
        }, 1000);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
        cancelBtn.addEventListener('click', () => {
            const t = window.CURRENT_TRANSLATIONS || {
                'cancel-order-title': '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                'cancel-order-message': '–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω'
            };
            
            this.showConfirm(
                t['cancel-order-title'],
                t['cancel-order-message'],
                async () => {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ClientAPI
                        if (!window.ClientAPI || typeof window.ClientAPI.cancelOrder !== 'function') {
                            throw new Error('API –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                        }
                        
                        await window.ClientAPI.cancelOrder(orderData.order_id);
                        
                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
                        this.stopGlobalOrderTimer();
                        clearInterval(uiUpdateInterval);
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        this.closeActive();
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–∞–ª–∫–∏
                        setTimeout(() => {
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–∞–ª–∫—É –∑–∞–∫–∞–∑–∞
                            this.closeActive();
                        }, 100);
                        
                        const t = window.CURRENT_TRANSLATIONS || { 'order-cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω' };
                        NotificationManager.showSuccess(t['order-cancelled']);
                    } catch (error) {
                        APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑');
                    }
                }
            );
        });
        
        // –û—á–∏—â–∞–µ–º UI –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const originalClose = this.closeActive.bind(this);
        this.closeActive = () => {
            clearInterval(uiUpdateInterval);
            this.closeActive = originalClose;
            originalClose();
        };
        
        return modalId;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    static showConfirm(title, message, onConfirm, onCancel = null) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        const t = window.CURRENT_TRANSLATIONS || {
            'cancel': '–û—Ç–º–µ–Ω–∞',
            'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
        };
        
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">${title}</h2>
            </div>
            <div class="modal-content">
                <div class="confirm-icon">‚ö†Ô∏è</div>
                <div class="confirm-message">${message}</div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="confirmCancel">${t['cancel']}</button>
                <button class="btn btn-primary" id="confirmOk">${t['confirm']}</button>
            </div>
        `;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.closeAll();
        
        const modalId = this.show(content, { 
            className: 'confirm-modal',
            hideClose: true,
            overlayClass: 'confirm-overlay'
        });
        
        const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
        
        modal.querySelector('#confirmCancel').addEventListener('click', () => {
            if (onCancel) onCancel();
            this.closeActive();
        });
        
        modal.querySelector('#confirmOk').addEventListener('click', () => {
            if (onConfirm) onConfirm();
            this.closeActive();
        });
        
        return modalId;
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    static formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ —Å PIN-–∫–æ–¥–æ–º
    static openTableWithPin(currentTableId) {
        this.openPinEntry((pin) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º PIN-–∫–æ–¥
                            window.ClientAPI.verifyTablePin(pin).then(response => {
                if (response.status === 'success') {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º PIN –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    this.closeActive();
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–æ–ª–æ–≤
                    setTimeout(() => {
                        this.openTableSelection(currentTableId, (tableId, tableNumber) => {
                            try {
                                CartManager.setTable(tableId, tableNumber);
                            } catch (e) {
                                const t = window.CURRENT_TRANSLATIONS || { 'table-select-error': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª' };
                                NotificationManager.showError(t['table-select-error']);
                            }
                        });
                    }, 300);
                } else {
                    const t = window.CURRENT_TRANSLATIONS || { 'wrong-pin': '–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥' };
                    NotificationManager.showError(t['wrong-pin']);
                }
            }).catch(error => {
                APIUtils.handleError(error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PIN-–∫–æ–¥–∞');
            });
        }, window.CURRENT_TRANSLATIONS?.['enter-pin'] || "–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–∞–º");
    }

    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–∫–∞–∑–µ
    static showExistingOrderModal(message) {
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">–ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</h2>
            </div>
            <div class="modal-content">
                <div class="info-icon">‚ÑπÔ∏è</div>
                <div class="info-message">${message}</div>
                <div class="info-details">
                    <p>–î–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="existingOrderOk">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `;
        
        const modalId = this.show(content, { 
            className: 'info-modal',
            hideClose: false
        });
        
        const modal = document.querySelector(`[data-modal-id="${modalId}"]`);
        
        modal.querySelector('#existingOrderOk').addEventListener('click', () => {
            this.closeActive();
        });
        
        return modalId;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç–µ
     */
    static showBonusCardDetails(cardData, isError = false) {
        const { card, reason, card_number } = cardData;
        
        let statusClass = 'success';
        let statusIcon = '‚úÖ';
        let title = '–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞';
        
        if (isError) {
            statusClass = 'error';
            statusIcon = '‚ùå';
            title = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç–æ–π';
        }
        
        const content = `
            <div class="modal-header ${statusClass}">
                <h2 class="modal-title">
                    ${statusIcon} ${title}
                </h2>
            </div>
            <div class="modal-content">
                <div class="card-info">
                    <div class="card-number">
                        <strong>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</strong> ${card_number}
                    </div>
                    
                    ${card ? `
                        <div class="card-details">
                            <div class="detail-row">
                                <span class="label">–°–∫–∏–¥–∫–∞:</span>
                                <span class="value discount">${card.discount_percent}%</span>
                            </div>
                            <div class="detail-row">
                                <span class="label">–°—Ç–∞—Ç—É—Å:</span>
                                <span class="value status ${card.is_active ? 'active' : 'inactive'}">
                                    ${card.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                                </span>
                            </div>
                            ${card.activated_at ? `
                                <div class="detail-row">
                                    <span class="label">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</span>
                                    <span class="value">${new Date(card.activated_at).toLocaleDateString('ru-RU')}</span>
                                </div>
                            ` : ''}
                            ${card.deactivated_at ? `
                                <div class="detail-row">
                                    <span class="label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
                                    <span class="value">${new Date(card.deactivated_at).toLocaleDateString('ru-RU')}</span>
                                </div>
                            ` : ''}
                        </div>
                    ` : ''}
                    
                    ${reason ? `
                        <div class="reason-box ${statusClass}">
                            <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}
                        </div>
                    ` : ''}
                </div>
                
                <div class="card-actions">
                    <button class="btn btn-secondary" onclick="ModalManager.closeActive()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                    ${isError ? `
                        <button class="btn btn-primary" onclick="ModalManager.showBonusCardInput()">
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É
                        </button>
                    ` : `
                        <button class="btn btn-success" onclick="ModalManager.applyBonusCard('${card_number}')">
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É
                        </button>
                    `}
                </div>
            </div>
        `;
        
        return this.show(content, { 
            className: `bonus-card-modal ${statusClass}`,
            hideClose: false
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∞ –≤–≤–æ–¥–∞ –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã
     */
    static showBonusCardInput() {
        const content = `
            <div class="modal-header">
                <h2 class="modal-title">
                    üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã
                </h2>
            </div>
            <div class="modal-content">
                <div class="input-group">
                    <label for="bonusCardInput">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (6 —Ü–∏—Ñ—Ä):</label>
                    <input type="text" id="bonusCardInput" 
                           maxlength="6" 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456"
                           pattern="[0-9]{6}"
                           class="form-control">
                    <div class="input-help">
                        –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                    </div>
                </div>
                
                <div class="card-actions">
                    <button class="btn btn-secondary" onclick="ModalManager.closeActive()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-primary" onclick="ModalManager.verifyBonusCard()">
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É
                    </button>
                </div>
            </div>
        `;
        
        const modalId = this.show(content, { 
            className: 'bonus-card-input-modal',
            hideClose: false
        });
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            const input = document.querySelector('#bonusCardInput');
            if (input) input.focus();
        }, 100);
        
        return modalId;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã
     */
    static async verifyBonusCard() {
        const input = document.querySelector('#bonusCardInput');
        if (!input) return;
        
        const cardNumber = input.value.trim();
        
        if (cardNumber.length !== 6 || !/^\d{6}$/.test(cardNumber)) {
            this.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', 'error');
            return;
        }
        
        try {
            const response = await window.ClientAPI.verifyBonusCard(cardNumber);
            
            if (response.status === 'success') {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
                this.closeActive();
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã
                this.showBonusCardDetails(response.data, false);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
                this.showBonusCardDetails(response.data, true);
            }
        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç—ã: ' + error.message, 'error');
        }
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã
    static applyBonusCard(cardNumber) {
        this.showConfirm(
            '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É?',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É ‚Ññ${cardNumber}?`,
            async () => {
                try {
                    APIUtils.showLoading(null, '–ü—Ä–∏–º–µ–Ω—è–µ–º...'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
                    
                    if (!window.ClientAPI || typeof window.ClientAPI.applyBonusCard !== 'function') {
                        throw new Error('API –Ω–µ –≥–æ—Ç–æ–≤');
                    }
                    
                    const response = await window.ClientAPI.applyBonusCard(cardNumber);
                    
                    if (response.status === 'success') {
                        const t = window.CURRENT_TRANSLATIONS || { 'bonus-card-applied': '–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!' };
                        NotificationManager.showSuccess(t['bonus-card-applied']);
                        this.closeActive();
                    } else {
                        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É');
                    }
                } catch (error) {
                    APIUtils.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É');
                } finally {
                    APIUtils.hideLoading(null); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
                }
            }
        );
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    static showAlert(message, type = 'info') {
        const alertContent = `
            <div class="alert alert-${type}">
                ${message}
            </div>
        `;
        this.show(alertContent, { className: 'alert-modal' });
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    static startGlobalOrderTimer(orderId, timeoutSeconds) {
        console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ #' + orderId + ' –Ω–∞ ' + timeoutSeconds + ' —Å–µ–∫—É–Ω–¥');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopGlobalOrderTimer();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞
        this.orderTimerData = {
            orderId: orderId,
            remainingTime: timeoutSeconds,
            startTime: Date.now()
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
        this.globalOrderTimer = setInterval(() => {
            this.orderTimerData.remainingTime--;
            
            if (this.orderTimerData.remainingTime <= 0) {
                console.log('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #' + orderId + ', –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º');
                this.stopGlobalOrderTimer();
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
                setTimeout(() => {
                    this.confirmOrder();
                }, 1000);
            }
        }, 1000);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.saveOrderTimerToStorage();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        this.showOrderTimerIndicator();
    }
    
    static stopGlobalOrderTimer() {
        if (this.globalOrderTimer) {
            console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–∫–∞–∑–∞');
            clearInterval(this.globalOrderTimer);
            this.globalOrderTimer = null;
        }
        
        this.orderTimerData = null;
        this.clearOrderTimerFromStorage();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        this.hideOrderTimerIndicator();
    }
    
    static saveOrderTimerToStorage() {
        if (this.orderTimerData) {
            localStorage.setItem('orderTimer', JSON.stringify({
                orderId: this.orderTimerData.orderId,
                remainingTime: this.orderTimerData.remainingTime,
                startTime: this.orderTimerData.startTime
            }));
        }
    }
    
    static clearOrderTimerFromStorage() {
        localStorage.removeItem('orderTimer');
    }
    
    static restoreOrderTimerFromStorage() {
        const stored = localStorage.getItem('orderTimer');
        if (stored) {
            try {
                const data = JSON.parse(stored);
                const elapsed = Math.floor((Date.now() - data.startTime) / 1000);
                const remainingTime = Math.max(0, data.remainingTime - elapsed);
                
                if (remainingTime > 0) {
                    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–∫–∞–∑–∞ #' + data.orderId + ', –æ—Å—Ç–∞–ª–æ—Å—å: ' + remainingTime + '—Å');
                    this.orderTimerData = {
                        orderId: data.orderId,
                        remainingTime: remainingTime,
                        startTime: data.startTime
                    };
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                    this.currentOrderData = { order_id: data.orderId };
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    this.showOrderTimerIndicator();
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                    this.globalOrderTimer = setInterval(() => {
                        this.orderTimerData.remainingTime--;
                        this.saveOrderTimerToStorage();
                        
                        if (this.orderTimerData.remainingTime <= 0) {
                            console.log('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ #' + data.orderId);
                            this.stopGlobalOrderTimer();
                            
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
                            setTimeout(() => {
                                this.confirmOrder();
                            }, 1000);
                        }
                    }, 1000);
                    
                    return true;
                } else {
                    // –í—Ä–µ–º—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ
                    console.log('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ #' + data.orderId + ', –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º');
                    this.clearOrderTimerFromStorage();
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    this.currentOrderData = { order_id: data.orderId };
                    setTimeout(() => {
                        this.confirmOrder();
                    }, 1000);
                    
                    return false;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞:', error);
                this.clearOrderTimerFromStorage();
            }
        }
        return false;
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    static showOrderTimerIndicator() {
        if (!this.orderTimerData) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        this.hideOrderTimerIndicator();
        
        const indicator = document.createElement('div');
        indicator.id = 'orderTimerIndicator';
        indicator.className = 'order-timer-indicator';
        indicator.innerHTML = `
            <div class="indicator-content" onclick="ModalManager.showActiveOrderModal()">
                <div class="indicator-icon">‚è∞</div>
                <div class="indicator-text">
                    <div class="order-info">–ó–∞–∫–∞–∑ #${this.orderTimerData.orderId}</div>
                    <div class="time-remaining" id="indicatorTime">${this.formatTime(this.orderTimerData.remainingTime)}</div>
                </div>
                <div class="indicator-arrow">üëÜ</div>
            </div>
        `;
        
        document.body.appendChild(indicator);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
        this.updateIndicatorTimer = setInterval(() => {
            const timeElement = document.getElementById('indicatorTime');
            if (timeElement && this.orderTimerData) {
                timeElement.textContent = this.formatTime(this.orderTimerData.remainingTime);
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ü—É
                if (this.orderTimerData.remainingTime <= 60) {
                    indicator.classList.add('danger');
                } else if (this.orderTimerData.remainingTime <= 120) {
                    indicator.classList.add('warning');
                }
            }
        }, 1000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            indicator.classList.add('show');
        }, 100);
    }
    
    static hideOrderTimerIndicator() {
        const indicator = document.getElementById('orderTimerIndicator');
        if (indicator) {
            indicator.remove();
        }
        
        if (this.updateIndicatorTimer) {
            clearInterval(this.updateIndicatorTimer);
            this.updateIndicatorTimer = null;
        }
    }
    
    static showActiveOrderModal() {
        if (!this.orderTimerData || !this.currentOrderData) return;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        this.openOrderConfirmation(this.currentOrderData);
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º (–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–µ—á–∞—Ç—å)
    static async confirmOrder() {
        if (!this.currentOrderData || !this.currentOrderData.order_id) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
            const t = window.CURRENT_TRANSLATIONS || { 'order-data-error': '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
            NotificationManager.showError(t['order-data-error']);
            return;
        }
        
        const orderId = this.currentOrderData.order_id;
        console.log('üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #' + orderId);
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const confirmButton = document.querySelector('button[onclick="confirmOrder()"]');
            if (confirmButton) {
                const originalText = confirmButton.innerHTML;
                confirmButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é...';
                confirmButton.disabled = true;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—É—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞)
            const response = await fetch(`/waiter/api/orders/${orderId}/print`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrfToken,
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            const data = await response.json();
            
            if (data.status === 'success') {
                console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å');
                const t = window.CURRENT_TRANSLATIONS || { 'order-confirmed': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é!' };
                NotificationManager.showSuccess(t['order-confirmed']);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
                this.stopGlobalOrderTimer();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                this.closeActive();
                
                // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                this.currentOrderData = null;
                
            } else {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            const t = window.CURRENT_TRANSLATIONS || { 'order-confirm-error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑' };
            NotificationManager.showError(`${t['order-confirm-error']}: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const confirmButton = document.querySelector('button[onclick="confirmOrder()"]');
            if (confirmButton) {
                confirmButton.innerHTML = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
                confirmButton.disabled = false;
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.ModalManager = ModalManager;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
window.showBonusCardDetails = function(cardData, isError = false) {
    return ModalManager.showBonusCardDetails(cardData, isError);
};

window.showBonusCardInput = function() {
    return ModalManager.showBonusCardInput();
};

window.verifyBonusCard = function() {
    return ModalManager.verifyBonusCard();
};

window.confirmOrder = function() {
    return ModalManager.confirmOrder();
};