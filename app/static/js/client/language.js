/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏
 */

class LanguageManager {
    static init() {
        console.log('üåê Initializing Language Manager');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadLanguageSettings();
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤
        this.createLanguageButtons();
        
        this.setupEventListeners();
        this.applyLanguage(this.currentLanguage);
        
        console.log('‚úÖ Language Manager initialized');
        console.log('üîç Language buttons created:', document.querySelectorAll('.lang-btn').length);
        console.log('üîç Language selector found:', document.getElementById('languageSelector'));
    }
    
    static createLanguageButtons() {
        const languageSelector = document.getElementById('languageSelector');
        console.log('üîç Creating language buttons, selector found:', languageSelector);
        
        if (!languageSelector) {
            console.error('‚ùå Language selector not found!');
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        languageSelector.innerHTML = '';
        
        console.log('üîç Supported languages:', this.supportedLanguages);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —è–∑—ã–∫–∞
        this.supportedLanguages.forEach(lang => {
            const btn = document.createElement('button');
            btn.className = 'lang-btn';
            btn.setAttribute('data-lang', lang);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            const langTexts = {
                'ru': '–†–£',
                'tk': 'TM', 
                'en': 'EN'
            };
            
            btn.textContent = langTexts[lang] || lang.toUpperCase();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (lang === this.currentLanguage) {
                btn.classList.add('active');
            }
            
            languageSelector.appendChild(btn);
            console.log('üîç Added language button:', lang, btn.textContent);
        });
        
        console.log('üîç Total language buttons created:', languageSelector.querySelectorAll('.lang-btn').length);
    }
    
    static loadLanguageSettings() {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const config = window.CLIENT_CONFIG || {};
        const settings = config.settings || {};
        
        console.log('üîç Loading language settings from config:', config);
        console.log('üîç Settings object:', settings);
        
        // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.currentLanguage = localStorage.getItem('language') || 
                              settings.default_language || 'ru';
        
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        const availableLanguages = settings.available_languages || 'ru,en,tk';
        this.supportedLanguages = availableLanguages.split(',');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        this.supportedLanguages = this.supportedLanguages.filter(lang => 
            ['ru', 'tk', 'en'].includes(lang)
        );
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if (!this.supportedLanguages.includes(this.currentLanguage)) {
            this.currentLanguage = this.supportedLanguages[0] || 'ru';
        }
        
        console.log('üåê Language settings loaded:', {
            currentLanguage: this.currentLanguage,
            supportedLanguages: this.supportedLanguages,
            availableLanguages: availableLanguages
        });
    }
    
    static setupEventListeners() {
        const langButtons = document.querySelectorAll('.lang-btn');
        
        langButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const lang = btn.getAttribute('data-lang');
                if (this.supportedLanguages.includes(lang)) {
                    this.setLanguage(lang);
                }
            });
        });
    }
    
    static setLanguage(lang) {
        if (this.currentLanguage === lang) return;
        
        this.currentLanguage = lang;
        localStorage.setItem('language', lang);
        
        this.applyLanguage(lang);
        this.updateActiveButton(lang);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        if (window.MenuManager) {
            window.MenuManager.changeLanguage(lang);
        }
    }
    
    static applyLanguage(lang) {
        // –û–±–Ω–æ–≤–∏—Ç—å URL –ø–∞—Ä–∞–º–µ—Ç—Ä
        const url = new URL(window.location);
        url.searchParams.set('lang', lang);
        window.history.replaceState({}, '', url);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç —è–∑—ã–∫–∞
        document.documentElement.setAttribute('lang', lang);
    }
    
    static updateActiveButton(lang) {
        const langButtons = document.querySelectorAll('.lang-btn');
        
        langButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.getAttribute('data-lang') === lang) {
                btn.classList.add('active');
            }
        });
    }
    
    static getCurrentLanguage() {
        return this.currentLanguage;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.LanguageManager = LanguageManager;