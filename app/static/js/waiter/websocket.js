/**
 * WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
 */

class WaiterWebSocket {
    constructor(waiterId) {
        this.waiterId = waiterId;
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 2000;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        this.lastOrderId = null;
        this.lastCallId = null;
        
        this.init();
    }
    
    init() {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
        this.connect();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.setupPageEvents();
    }
    
    setupPageEvents() {}
    
    connect() {
        try {
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É
            this.socket = io();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.socket.on('connect', () => {
                this.isConnected = true;
                this.reconnectAttempts = 0;
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                
                // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
                this.joinWaiterRoom();
            });
            
            this.socket.on('disconnect', () => {
                this.isConnected = false;
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                this.scheduleReconnect();
            });
            
            this.socket.on('error', (error) => {
                console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.socket.on('new_order', (data) => {
                this.handleNewOrder(data);
            });
            
            this.socket.on('order_updated', (data) => {
                this.handleOrderUpdated(data);
            });
            
            this.socket.on('waiter_call', (data) => {
                this.handleWaiterCall(data);
            });
            
            this.socket.on('joined_room', (data) => {
                console.log('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', data.message);
            });
            
            this.socket.on('error', (data) => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
        }
    }
    
    joinWaiterRoom() {
        if (this.socket && this.isConnected) {
            this.socket.emit('join_waiter_room', {
                waiter_id: this.waiterId
            });
        }
    }
    
    handleNewOrder(data) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–∫–∞–∑–∞
        if (this.lastOrderId === data.order_id) {
            console.log('–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.order_id);
            return;
        }
        
        console.log('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:', data);
        this.lastOrderId = data.order_id;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –û–î–ò–ù –†–ê–ó
        playNotificationSound();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.waiterNotifications) {
            window.waiterNotifications.show(
                data.message || `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–æ–ª–∞ ‚Ññ${data.table_number}`,
                'success',
                8000
            );
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        this.addNewOrderToList(data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        this.updateOrderCounter();
    }
    
    handleOrderUpdated(data) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤
        this.updateOrderInList(data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.waiterNotifications) {
            window.waiterNotifications.show(
                data.message || `–ó–∞–∫–∞–∑ ‚Ññ${data.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω`,
                'info',
                5000
            );
        }
    }
    
    handleWaiterCall(data) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –≤—ã–∑–æ–≤–∞
        if (this.lastCallId === data.call_id) {
            console.log('–í—ã–∑–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.call_id);
            return;
        }
        
        console.log('–í—ã–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:', data);
        this.lastCallId = data.call_id;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –û–î–ò–ù –†–ê–ó
        playNotificationSound();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–í—ã–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞', data.message, 'call');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        this.addNewCallToList(data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
        this.updateCallCounter();
    }
    
    playNotificationSound() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML5 Audio —Ä–µ—à–µ–Ω–∏–µ
        playNotificationSound();
    }
    
    showNotification(title, message, type) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification(title, {
                body: message,
                icon: '/static/images/logo.svg',
                tag: type
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showInlineNotification(title, message, type);
    }
    
    showInlineNotification(title, message, type) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <span class="notification-title">${title}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
            </div>
            <div class="notification-body">${message}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 9999;
            min-width: 300px;
            max-width: 400px;
            animation: slideIn 0.3s ease-out;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
    
    updateOrdersList() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç)
        const ordersList = document.getElementById('orders-list');
        if (ordersList) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤');
        }
    }
    
    updateCallsList() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç)
        const callsList = document.getElementById('callsList');
        if (callsList) {
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è loadCalls, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (typeof window.loadCalls === 'function') {
                window.loadCalls();
            } else {
                // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                console.log('–§—É–Ω–∫—Ü–∏—è loadCalls –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        }
    }
    
    scheduleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectDelay}ms`);
            
            setTimeout(() => {
                this.connect();
            }, this.reconnectDelay);
        } else {
            console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
    }
    
    disconnect() {
        if (this.socket) {
            this.socket.emit('leave_waiter_room', {
                waiter_id: this.waiterId
            });
            this.socket.disconnect();
        }
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û–¢ –ú–ï–¢–û–î
    addNewOrderToList(orderData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
        if (!window.location.pathname.includes('/waiter/orders')) {
            console.log('–ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫');
            return;
        }
        
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫:', orderData);
        
        const ordersContainer = document.getElementById('ordersList');
        if (!ordersContainer) {
            console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const orderHtml = this.createOrderCard(orderData);
        
        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã" (pending)
        let pendingGroup = ordersContainer.querySelector('.pending-group');
        
        if (!pendingGroup) {
            console.log('–ì—Ä—É–ø–ø–∞ pending –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
            // –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
            const statusInfo = window.statusReference?.pending || { name: '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', icon: 'üü¢' };
            pendingGroup = document.createElement('div');
            pendingGroup.className = 'status-group pending-group';
            pendingGroup.innerHTML = `<h3 class="status-group-title pending-title">${statusInfo.icon} ${statusInfo.name}</h3>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            ordersContainer.insertBefore(pendingGroup, ordersContainer.firstChild);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
        pendingGroup.insertAdjacentHTML('beforeend', orderHtml);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        const newOrder = pendingGroup.lastElementChild;
        newOrder.style.opacity = '0';
        newOrder.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
            newOrder.style.transition = 'all 0.3s ease';
            newOrder.style.opacity = '1';
            newOrder.style.transform = 'translateY(0)';
        }, 100);
        
        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò
    createOrderCard(order) {
        const statusColor = this.getStatusColor(order.status || 'pending');
        const statusIcon = this.getStatusIcon(order.status || 'pending');
        
        return `
            <div class="order-card" data-order-id="${order.order_id}">
                <div class="order-header">
                    <div class="order-info">
                        <div class="order-title">
                            <h3>–ó–∞–∫–∞–∑ #${order.order_id}</h3>
                            <span class="order-status ${order.status || 'pending'}" style="background: ${statusColor};">
                                ${statusIcon} ${(order.status || 'pending').toUpperCase()}
                            </span>
                        </div>
                        <div class="order-table-info">
                            <i class="fas fa-table"></i>
                            <span>–°—Ç–æ–ª: ${order.table_number}</span>
                            <i class="fas fa-users"></i>
                            <span>–ì–æ—Å—Ç–µ–π: ${order.guest_count || 1}</span>
                        </div>
                    </div>
                </div>
                <div class="order-body">
                    <div class="order-total">
                        <div class="total-label">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</div>
                        <div class="total-amount">${order.total_amount} TMT</div>
                    </div>
                    <div class="order-meta">
                        <div class="meta-item">
                            <i class="fas fa-clock"></i>
                            <span>–°–æ–∑–¥–∞–Ω: ${new Date(order.created_at).toLocaleString('ru-RU')}</span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-language"></i>
                            <span>–Ø–∑—ã–∫: ${(order.language || 'ru').toUpperCase()}</span>
                        </div>
                    </div>
                </div>
                <div class="order-actions">
                    <button class="btn btn-primary" onclick="window.viewOrderDetails(${order.order_id})">
                        <i class="fas fa-eye"></i> –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                    </button>
                    <button class="btn btn-danger" onclick="window.cancelOrder(${order.order_id})">
                        <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                </div>
            </div>
        `;
    }
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–£–°–û–í
    getStatusColor(status) {
        if (window.statusReference && window.statusReference[status] && window.statusReference[status].color) {
            return window.statusReference[status].color;
        }
        const fallbackColors = {
            'pending': '#28a745',    // –ó–µ–ª–µ–Ω—ã–π
            'confirmed': '#ffc107',  // –ñ–µ–ª—Ç—ã–π
            'completed': '#6c757d',  // –°–µ—Ä—ã–π
            'cancelled': '#dc3545'   // –ö—Ä–∞—Å–Ω—ã–π
        };
        return fallbackColors[status] || '#6c757d';
    }
    
    getStatusIcon(status) {
        if (window.statusReference && window.statusReference[status] && window.statusReference[status].icon) {
            return window.statusReference[status].icon;
        }
        const fallbackIcons = {
            'pending': 'üü¢',
            'confirmed': '‚úÖ',
            'completed': '‚ö´',
            'cancelled': '‚ùå'
        };
        return fallbackIcons[status] || '‚ö´';
    }
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê
    updateOrderCounter() {
        const counter = document.querySelector('.orders-counter');
        if (counter) {
            const currentCount = parseInt(counter.textContent) || 0;
            counter.textContent = currentCount + 1;
            counter.classList.add('pulse');
            
            setTimeout(() => {
                counter.classList.remove('pulse');
            }, 1000);
        }
    }
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê –í –°–ü–ò–°–ö–ï
    updateOrderInList(data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
        if (!window.location.pathname.includes('/waiter/orders')) {
            console.log('–ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            return;
        }
        
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${data.order_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${data.status}`);
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        if (typeof window.loadOrders === 'function') {
            console.log('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤');
            window.loadOrders();
        } else {
            console.log('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è loadOrders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É');
            
            // Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
            const orderCard = document.querySelector(`[data-order-id="${data.order_id}"]`);
            if (orderCard) {
                const statusElement = orderCard.querySelector('.order-status');
                if (statusElement && data.status) {
                    const statusColor = this.getStatusColor(data.status);
                    const statusIcon = this.getStatusIcon(data.status);
                    
                    statusElement.textContent = `${statusIcon} ${data.status.toUpperCase()}`;
                    statusElement.style.background = statusColor;
                    statusElement.className = `order-status ${data.status}`;
                }
            }
        }
        
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${data.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–∫–µ`);
    }


    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –î–õ–Ø –í–´–ó–û–í–û–í
    addNewCallToList(callData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–∑–æ–≤–æ–≤
        if (!window.location.pathname.includes('/waiter/calls')) {
            console.log('–ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–∑–æ–≤–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫');
            return;
        }
        
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ –≤ —Å–ø–∏—Å–æ–∫:', callData);
        
        const callsContainer = document.getElementById('callsList');
        if (!callsContainer) {
            console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–∑–æ–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        const callHtml = this.createCallCard(callData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        callsContainer.insertAdjacentHTML('afterbegin', callHtml);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        const newCall = callsContainer.firstElementChild;
        newCall.style.opacity = '0';
        newCall.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
            newCall.style.transition = 'all 0.3s ease';
            newCall.style.opacity = '1';
            newCall.style.transform = 'translateY(0)';
        }, 100);
        
        console.log('–í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    }
    
    // –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò –í–´–ó–û–í–ê
    createCallCard(call) {
        return `
            <div class="call-card call-pending priority-—Å—Ä–µ–¥–Ω–∏–π" data-call-id="${call.call_id}">
                <div class="call-header">
                    <div class="call-table">
                        <i class="fas fa-utensils"></i>
                        <strong>–°—Ç–æ–ª ${call.table_number || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong>
                    </div>
                    <div class="call-time">
                        <i class="fas fa-clock"></i>
                        –¢–æ–ª—å–∫–æ —á—Ç–æ
                    </div>
                    <div class="call-status-badge">
                        <span class="status-badge status-pending">
                            –ù–æ–≤—ã–π
                        </span>
                    </div>
                </div>
                <div class="call-content">
                    <div class="call-message">
                        <i class="fas fa-comment"></i>
                        ${call.message || '–í—ã–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞'}
                    </div>
                    <div class="call-from">
                        <i class="fas fa-user"></i>
                        –ö–ª–∏–µ–Ω—Ç —Å—Ç–æ–ª–∞ ${call.table_number || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </div>
                </div>
                <div class="call-footer">
                    <div class="call-actions">
                        <button class="btn btn-primary" onclick="markAsRead(${call.call_id})">
                            <i class="fas fa-eye"></i> –ü—Ä–æ—á–∏—Ç–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê –í–´–ó–û–í–û–í
    updateCallCounter() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const callCounter = document.getElementById('pendingCallsCount');
        if (callCounter) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
            const currentCount = parseInt(callCounter.textContent.match(/\d+/)?.[0] || '0');
            callCounter.textContent = `${currentCount + 1} –∞–∫—Ç–∏–≤–Ω—ã—Ö`;
        }
    }
}

// –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –ü–ï–†–ï–î –∫–ª–∞—Å—Å–æ–º WaiterWebSocket
let __audioElement = null;
let __audioUnlocked = false;
let __lastPlayTime = 0;

// –°–æ–∑–¥–∞–µ–º HTML5 Audio —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ç—ã–º –∑–≤—É–∫–æ–º
function createAudioElement() {
    if (__audioElement) return __audioElement;
    
    const audio = new Audio();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ Web Audio API
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ "–±–∏–ø"
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        // –°–æ–∑–¥–∞–µ–º MediaStream –¥–ª—è –∑–∞–ø–∏—Å–∏
        const destination = audioContext.createMediaStreamDestination();
        oscillator.connect(destination);
        
        const mediaRecorder = new MediaRecorder(destination.stream);
        const chunks = [];
        
        mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
        mediaRecorder.onstop = () => {
            const blob = new Blob(chunks, { type: 'audio/wav' });
            const url = URL.createObjectURL(blob);
            audio.src = url;
            audio.load();
            
            // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
            audio._blobUrl = url;
        };
        
        oscillator.start();
        mediaRecorder.start();
        
        setTimeout(() => {
            oscillator.stop();
            mediaRecorder.stop();
        }, 100);
        
    } catch (e) {
        console.log('Web Audio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫');
        
        // Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        const sampleRate = 44100;
        const duration = 0.1; // 100ms
        const samples = sampleRate * duration;
        
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const buffer = audioContext.createBuffer(1, samples, sampleRate);
        const data = buffer.getChannelData(0);
        
        for (let i = 0; i < samples; i++) {
            const t = i / sampleRate;
            data[i] = Math.sin(2 * Math.PI * 800 * t) * Math.exp(-t * 10);
        }
        
        const source = audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(audioContext.destination);
        source.start();
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        audio.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT';
    }
    
    audio.volume = 0.3;
    audio.preload = 'auto';
    
    __audioElement = audio;
    return audio;
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playNotificationSound() {
    const now = Date.now();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 500–º—Å
    if (now - __lastPlayTime < 500) {
        console.log('üîá –ó–≤—É–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)');
        return;
    }
    
    try {
        // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Web Audio API –Ω–∞–ø—Ä—è–º—É—é
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º
        if (audioContext.state === 'suspended') {
            audioContext.resume();
        }
        
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ "–±–∏–ø"
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
        
        console.log('üîä –ó–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ Web Audio API');
        __lastPlayTime = now;
        
    } catch (error) {
        console.warn('Web Audio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º HTML5 Audio:', error);
        
        // Fallback –Ω–∞ HTML5 Audio
        try {
            const audio = createAudioElement();
            
            if (audio.src && audio.src !== 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT') {
                audio.currentTime = 0;
                const playPromise = audio.play();
                
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log('üîä –ó–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ HTML5 Audio');
                            __lastPlayTime = now;
                        })
                        .catch(error => {
                            console.warn('–û—à–∏–±–∫–∞ HTML5 Audio:', error);
                        });
                }
            }
        } catch (fallbackError) {
            console.warn('–í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', fallbackError);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (__audioElement) {
        __audioElement.pause();
        __audioElement.src = '';
        __audioElement = null;
    }
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
    createAudioElement();
    
    // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const waiterId = document.body.dataset.waiterId;
    
    if (waiterId) {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞
        window.waiterWebSocket = new WaiterWebSocket(waiterId);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }
    }
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (__audioElement) {
        // –û—á–∏—â–∞–µ–º blob URL –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (__audioElement._blobUrl) {
            URL.revokeObjectURL(__audioElement._blobUrl);
        }
        __audioElement.pause();
        __audioElement.src = '';
        __audioElement = null;
    }
    
    if (window.waiterWebSocket) {
        window.waiterWebSocket.disconnect();
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        border-bottom: 1px solid #eee;
        background: #f8f9fa;
        border-radius: 8px 8px 0 0;
    }
    
    .notification-title {
        font-weight: 600;
        color: #333;
    }
    
    .notification-close {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .notification-close:hover {
        color: #333;
    }
    
    .notification-body {
        padding: 16px;
        color: #555;
        line-height: 1.4;
    }
    
    .notification-order {
        border-left: 4px solid #28a745;
    }
    
    .notification-call {
        border-left: 4px solid #dc3545;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞ */
    #enable-sound-btn {
        transition: all 0.3s ease;
        margin-left: 10px;
    }

    #enable-sound-btn:hover {
        transform: scale(1.05);
    }

    #enable-sound-btn:disabled {
        opacity: 0.8;
        cursor: not-allowed;
    }

    #enable-sound-btn .fas {
        margin-right: 5px;
    }

    /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∑–≤—É–∫–∞ */
    @keyframes soundPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }

    #enable-sound-btn.btn-success .fas {
        animation: soundPulse 2s infinite;
    }
`;
document.head.appendChild(style);
