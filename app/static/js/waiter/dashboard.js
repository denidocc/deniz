/**
 * Dashboard –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
 */

class WaiterDashboard {
    constructor() {
        this.stats = {};
        this.refreshInterval = null;
        this.init();
    }

    async init() {
        try {
            await this.loadDashboardData();
            this.initRefreshInterval();
            this.initEventListeners();
            this.initFlashMessages();
            console.log('üìä Dashboard –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dashboard:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
     */
    async loadDashboardData() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –≥–æ—Ç–æ–≤
            if (!window.WaiterAPI || typeof window.WaiterAPI.getDashboardStats !== 'function') {
                return; // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ API –Ω–µ –≥–æ—Ç–æ–≤
            }
            
            const response = await window.WaiterAPI.getDashboardStats();
            

            if (response.status === 'success') {
                this.stats = response.data;
                this.updateDashboardDisplay();
            }
        } catch (error) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å API
            if (window.WaiterAPI && typeof window.WaiterAPI.getDashboardStats === 'function') {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö dashboard:', error);
                if (window.waiterNotifications) {
                    waiterNotifications.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ dashboard');
                }
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
     */
    updateDashboardDisplay() {
        this.updateStatsCards();
        this.updateQuickActions();
        this.updateRecentActivity();
        this.loadRecentOrders();

    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsCards() {
        // –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–≤ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö)
        const pendingOrdersEl = document.getElementById('pendingOrdersCount');
        if (pendingOrdersEl) {
            const count = this.stats.pending_orders || 0;
            pendingOrdersEl.textContent = `${count} –Ω–æ–≤—ã—Ö`;
        }

        // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã (–≤ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö)
        const myTablesEl = document.getElementById('myTablesCount');
        if (myTablesEl) {
            const count = this.stats.assigned_tables || 0;
            myTablesEl.textContent = `${count} —Å—Ç–æ–ª–æ–≤`;
        }

        // –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–∑–æ–≤—ã (–≤ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö)
        const pendingCallsEl = document.getElementById('pendingCallsCount');
        if (pendingCallsEl) {
            const count = this.stats.pending_calls || 0;
            pendingCallsEl.textContent = `${count} –∞–∫—Ç–∏–≤–Ω—ã—Ö`;
        }


    }





    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    updateQuickActions() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const ordersBtn = document.querySelector('[data-action="orders"] .badge');
        if (ordersBtn && this.stats.pending_orders > 0) {
            ordersBtn.textContent = this.stats.pending_orders;
            ordersBtn.style.display = 'inline';
        } else if (ordersBtn) {
            ordersBtn.style.display = 'none';
        }

        const callsBtn = document.querySelector('[data-action="calls"] .badge');
        if (callsBtn && this.stats.pending_calls > 0) {
            callsBtn.textContent = this.stats.pending_calls;
            callsBtn.style.display = 'inline';
        } else if (callsBtn) {
            callsBtn.style.display = 'none';
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
     */
    updateRecentActivity() {
        const activityContainer = document.getElementById('recent-activity');
        if (!activityContainer || !this.stats.recent_activity) return;

        if (this.stats.recent_activity.length === 0) {
            activityContainer.innerHTML = `
                <div class="no-activity">
                    <i class="fas fa-coffee"></i>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
            `;
            return;
        }

        const activityHtml = this.stats.recent_activity.map(activity => `
            <div class="activity-item">
                <div class="activity-icon">
                    ${this.getActivityIcon(activity.type)}
                </div>
                <div class="activity-content">
                    <div class="activity-text">${activity.description}</div>
                    <div class="activity-time">${WaiterUtils.formatTime(activity.timestamp)}</div>
                </div>
            </div>
        `).join('');

        activityContainer.innerHTML = activityHtml;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    getActivityIcon(type) {
        const icons = {
            'order_created': 'üìã',
            'order_ready': '‚úÖ',
            'call_received': 'üîî',
            'table_assigned': 'ü™ë',

        };
        return icons[type] || 'üìå';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    initRefreshInterval() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.refreshInterval = setInterval(() => {
            this.loadDashboardData();
        }, 30000);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    initEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('[data-action]').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const action = button.getAttribute('data-action');
                this.handleQuickAction(action);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.getElementById('refresh-dashboard');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.refreshDashboard();
            });
        }

        // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–µ–ª–∞–µ–º –∏—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏)
        const statsCards = document.querySelectorAll('.stats-card[data-action]');
        statsCards.forEach(card => {
            card.style.cursor = 'pointer';
            card.addEventListener('click', (e) => {
                e.preventDefault();
                const action = card.getAttribute('data-action');
                this.handleQuickAction(action);
            });
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å flash —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    initFlashMessages() {
        const flashMessages = document.querySelectorAll('.flash-message');
        flashMessages.forEach(message => {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.hideFlashMessage(message);
            }, 5000);

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeBtn = message.querySelector('.flash-close');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    this.hideFlashMessage(message);
                });
            }

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.addEventListener('click', () => {
                this.hideFlashMessage(message);
            });
        });
    }

    /**
     * –°–∫—Ä—ã—Ç—å flash —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    hideFlashMessage(messageElement) {
        messageElement.style.transform = 'translateX(100%)';
        messageElement.style.opacity = '0';
        
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.parentNode.removeChild(messageElement);
            }
        }, 300);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     */
    handleQuickAction(action) {
        switch (action) {
            case 'orders':
                window.location.href = '/waiter/orders';
                break;
            case 'tables':
                window.location.href = '/waiter/tables';
                break;
            case 'calls':
                window.location.href = '/waiter/calls';
                break;

            default:
                console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥
     */
    async refreshDashboard() {
        const refreshBtn = document.getElementById('refresh-dashboard');
        if (refreshBtn) {
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        }

        try {
            await this.loadDashboardData();
            waiterNotifications.showSuccess('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } catch (error) {
            waiterNotifications.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            if (refreshBtn) {
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i>';
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    showStatsDetails(type) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        console.log('–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è:', type);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    destroy() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
     */
    async loadRecentOrders() {
        try {
            const recentOrdersList = document.getElementById('recentOrdersList');
            if (!recentOrdersList) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            recentOrdersList.innerHTML = `
                <div class="loading-state">
                    <div class="spinner"></div>
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</span>
                </div>
            `;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
            const response = await window.WaiterAPI.getOrders();
            
            if (response.status === 'success' && response.data.orders.length > 0) {
                // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                const recentOrders = response.data.orders
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 5);

                let ordersHtml = '';
                recentOrders.forEach(order => {
                    const statusColor = WaiterUtils.getOrderStatusColor(order.status);
                    const statusIcon = WaiterUtils.getOrderStatusIcon(order.status);
                    
                    ordersHtml += `
                        <div class="recent-order-item">
                            <div class="order-info">
                                <div class="order-header">
                                    <span class="order-number">–ó–∞–∫–∞–∑ #${order.id}</span>
                                    <span class="order-status-mini" style="background: ${statusColor};">
                                        ${order.status}
                                    </span>
                                </div>
                                <div class="order-details">
                                    <span class="table-info">–°—Ç–æ–ª ${order.table_number}</span>
                                    <span class="order-total">${order.total_amount} TMT</span>
                                </div>
                                <div class="order-time">
                                    ${new Date(order.created_at).toLocaleString('ru-RU', {
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    })}
                                </div>
                            </div>
                        </div>
                    `;
                });

                recentOrdersList.innerHTML = ordersHtml;
            } else {
                // –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤
                recentOrdersList.innerHTML = `
                    <div class="no-orders">
                        <i class="fas fa-clipboard-list"></i>
                        <span>–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤</span>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Error loading recent orders:', error);
            const recentOrdersList = document.getElementById('recentOrdersList');
            if (recentOrdersList) {
                recentOrdersList.innerHTML = `
                    <div class="error-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</span>
                    </div>
                `;
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM –ø–æ—Å–ª–µ WaiterAPI
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –ø–æ–∫–∞ WaiterAPI —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
    const waitForAPI = () => {
        if (window.WaiterAPI && typeof window.WaiterAPI.getDashboardStats === 'function') {
            window.waiterDashboard = new WaiterDashboard();
        } else {
            setTimeout(waitForAPI, 50);
        }
    };
    
    waitForAPI();
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.waiterDashboard) {
        window.waiterDashboard.destroy();
    }
});