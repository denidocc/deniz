/**
 * –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

class WaiterModals {
    constructor() {
        this.activeModal = null;
        this.init();
    }

    init() {
        this.initEventListeners();
        console.log('ü™ü –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    initEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.activeModal) {
                this.hide(this.activeModal);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-overlay')) {
                this.hide(e.target.querySelector('.modal'));
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    show(modalId, options = {}) {
        const modal = document.getElementById(modalId);
        if (!modal) {
            console.error(`–ú–æ–¥–∞–ª —Å ID ${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.activeModal && this.activeModal !== modal) {
            this.hide(this.activeModal);
        }

        this.activeModal = modal;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        modal.style.display = 'flex';
        modal.classList.add('modal-active');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.style.overflow = 'hidden';
        
        // –§–æ–∫—É—Å –Ω–∞ –º–æ–¥–∞–ª–µ
        setTimeout(() => {
            const firstInput = modal.querySelector('input, select, textarea, button');
            if (firstInput) {
                firstInput.focus();
            }
        }, 100);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.initModalSpecificHandlers(modal, options);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    hide(modal) {
        if (!modal) return;

        modal.classList.remove('modal-active');
        
        setTimeout(() => {
            modal.style.display = 'none';
        }, 300);

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.style.overflow = '';

        if (this.activeModal === modal) {
            this.activeModal = null;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
     */
    initModalSpecificHandlers(modal, options) {
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButtons = modal.querySelectorAll('[data-dismiss="modal"]');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => this.hide(modal));
        });

        // –§–æ—Ä–º—ã –≤ –º–æ–¥–∞–ª–∞—Ö
        const forms = modal.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', (e) => {
                this.handleFormSubmit(e, modal, options);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≤ –º–æ–¥–∞–ª–µ
     */
    async handleFormSubmit(event, modal, options) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
            }

            // –í—ã–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (options.onSubmit) {
                await options.onSubmit(data, modal, form);
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
            if (options.autoClose !== false) {
                this.hide(modal);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            waiterNotifications.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.innerHTML = submitBtn.getAttribute('data-original-text') || '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    async confirm(message, title = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', options = {}) {
        return new Promise((resolve) => {
            const modalId = 'dynamic-confirm-modal';
            
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            const existingModal = document.getElementById(modalId);
            if (existingModal) {
                existingModal.remove();
            }

            const modal = document.createElement('div');
            modal.id = modalId;
            modal.className = 'modal modal-overlay';
            modal.style.cssText = `
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                justify-content: center;
                align-items: center;
                z-index: 10001;
            `;

            modal.innerHTML = `
                <div class="modal-content" style="
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    max-width: 400px;
                    margin: 20px;
                    text-align: center;
                ">
                    <h3 style="margin: 0 0 15px; color: #333;">${title}</h3>
                    <p style="margin: 0 0 25px; color: #666;">${message}</p>
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button type="button" class="btn btn-secondary" data-action="cancel">
                            ${options.cancelText || '–û—Ç–º–µ–Ω–∞'}
                        </button>
                        <button type="button" class="btn btn-primary" data-action="confirm">
                            ${options.confirmText || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            modal.querySelector('[data-action="confirm"]').addEventListener('click', () => {
                modal.remove();
                resolve(true);
            });

            modal.querySelector('[data-action="cancel"]').addEventListener('click', () => {
                modal.remove();
                resolve(false);
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                    resolve(false);
                }
            });

            this.show(modalId);
        });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
     */
    createModal(id, title, content, options = {}) {
        const modal = document.createElement('div');
        modal.id = id;
        modal.className = 'modal modal-overlay';
        modal.style.cssText = `
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;

        const size = options.size || 'medium';
        const maxWidth = {
            small: '400px',
            medium: '600px',
            large: '800px',
            xlarge: '1000px'
        }[size] || '600px';

        modal.innerHTML = `
            <div class="modal-content" style="
                background: white;
                border-radius: 10px;
                max-width: ${maxWidth};
                margin: 20px;
                max-height: 90vh;
                overflow-y: auto;
                display: flex;
                flex-direction: column;
            ">
                <div class="modal-header" style="
                    padding: 20px 30px;
                    border-bottom: 1px solid #eee;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                ">
                    <h3 style="margin: 0; color: #333;">${title}</h3>
                    <button type="button" class="btn-close" data-dismiss="modal" style="
                        background: none;
                        border: none;
                        font-size: 24px;
                        cursor: pointer;
                        color: #999;
                        padding: 0;
                        width: 30px;
                        height: 30px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    ">&times;</button>
                </div>
                <div class="modal-body" style="
                    padding: 30px;
                    flex: 1;
                ">
                    ${content}
                </div>
                ${options.footer ? `
                <div class="modal-footer" style="
                    padding: 20px 30px;
                    border-top: 1px solid #eee;
                    display: flex;
                    justify-content: flex-end;
                    gap: 10px;
                ">
                    ${options.footer}
                </div>
                ` : ''}
            </div>
        `;

        document.body.appendChild(modal);
        return modal;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoader(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        const loaderId = 'waiter-loader-modal';
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        const existing = document.getElementById(loaderId);
        if (existing) {
            existing.remove();
        }

        const modal = this.createModal(loaderId, '', `
            <div style="text-align: center; padding: 20px;">
                <div style="
                    width: 50px;
                    height: 50px;
                    border: 5px solid #f3f3f3;
                    border-top: 5px solid #007bff;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 20px;
                "></div>
                <div style="font-size: 16px; color: #666;">${message}</div>
            </div>
        `, { size: 'small' });

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        if (!document.getElementById('waiter-modal-styles')) {
            const style = document.createElement('style');
            style.id = 'waiter-modal-styles';
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                .modal-overlay {
                    transition: opacity 0.3s ease;
                }
                .modal-active {
                    opacity: 1;
                }
            `;
            document.head.appendChild(style);
        }

        this.show(loaderId);
        return loaderId;
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoader() {
        const loader = document.getElementById('waiter-loader-modal');
        if (loader) {
            this.hide(loader);
            setTimeout(() => loader.remove(), 400);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥–∞–ª
     */
    getActiveModal() {
        return this.activeModal;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –º–æ–¥–∞–ª
     */
    isModalOpen(modalId = null) {
        if (modalId) {
            const modal = document.getElementById(modalId);
            return modal && modal.classList.contains('modal-active');
        }
        return this.activeModal !== null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
window.waiterModals = new WaiterModals();