"""CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–º."""

import click
from flask.cli import with_appcontext
from flask import current_app
from datetime import datetime, timedelta
import json

@click.group()
def audit():
    """–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–º."""
    pass

@audit.command()
@click.option('--limit', default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞')
@click.option('--staff-id', type=int, help='ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
@click.option('--action', help='–§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–π—Å—Ç–≤–∏—é')
@click.option('--hours', type=int, default=24, help='–ß–∞—Å–æ–≤ –Ω–∞–∑–∞–¥')
@with_appcontext
def logs(limit, staff_id, action, hours):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞."""
    from app.models import AuditLog, Staff
    
    query = AuditLog.query
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    since = datetime.utcnow() - timedelta(hours=hours)
    query = query.filter(AuditLog.created_at >= since)
    
    # –§–∏–ª—å—Ç—Ä—ã
    if staff_id:
        query = query.filter_by(staff_id=staff_id)
    if action:
        query = query.filter(AuditLog.action.contains(action))
    
    logs = query.order_by(AuditLog.created_at.desc()).limit(limit).all()
    
    if not logs:
        click.echo("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    click.echo(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name} ({log.staff.login if log.staff else 'system'})")
        click.echo(f"üéØ {log.action}")
        
        if log.table_affected:
            click.echo(f"ü™ë –°—Ç–æ–ª: {log.table_affected}")
        if log.order_affected:
            click.echo(f"üßæ –ó–∞–∫–∞–∑: {log.order_affected}")
        if log.ip_address:
            click.echo(f"üåê IP: {log.ip_address}")
        
        # –î–µ—Ç–∞–ª–∏
        details = log.get_details()
        if details:
            if 'method' in details and 'url' in details:
                click.echo(f"üîó {details['method']} {details['url']}")
            if 'response_status' in details:
                status_color = 'green' if details['response_status'] < 400 else 'red'
                click.echo(click.style(f"üìä –°—Ç–∞—Ç—É—Å: {details['response_status']}", fg=status_color))
            if 'duration_seconds' in details:
                click.echo(f"‚è±Ô∏è  –í—Ä–µ–º—è: {details['duration_seconds']}—Å")
        
        click.echo("-" * 60)

@audit.command()
@click.option('--days', default=7, help='–î–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
@with_appcontext
def stats(days):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–∞."""
    from app.models import AuditLog
    
    stats = AuditLog.get_statistics(days=days)
    
    click.echo(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–∞ –∑–∞ {days} –¥–Ω–µ–π:\n")
    click.echo(f"üìà –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}")
    click.echo(f"‚ùå –û—à–∏–±–æ–∫: {stats['error_count']} ({stats['error_percentage']}%)")
    
    click.echo(f"\nüîù –¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:")
    for action in stats['top_actions'][:5]:
        click.echo(f"  ‚Ä¢ {action['action']}: {action['count']}")
    
    click.echo(f"\nüë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    from app.models import Staff
    for user in stats['top_users'][:5]:
        staff = Staff.query.get(user['staff_id'])
        name = staff.name if staff else f"ID {user['staff_id']}"
        click.echo(f"  ‚Ä¢ {name}: {user['count']} –¥–µ–π—Å—Ç–≤–∏–π")

@audit.command()
@click.option('--hours', default=1, help='–ß–∞—Å–æ–≤ –Ω–∞–∑–∞–¥')
@with_appcontext
def errors(hours):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫."""
    from app.models import AuditLog
    
    since = datetime.utcnow() - timedelta(hours=hours)
    error_logs = AuditLog.query.filter(
        AuditLog.created_at >= since,
        AuditLog.action.like('%_error')
    ).order_by(AuditLog.created_at.desc()).all()
    
    if not error_logs:
        click.echo(f"üéâ –û—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    click.echo(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(error_logs)} –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n")
    
    for log in error_logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        details = log.get_details()
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name}")
        click.echo(click.style(f"üö® {log.action}", fg='red'))
        
        if 'error' in details:
            click.echo(f"üí• –û—à–∏–±–∫–∞: {details['error']}")
        if 'exception_type' in details:
            click.echo(f"üîç –¢–∏–ø: {details['exception_type']}")
        
        click.echo("-" * 60)

@audit.command()
@click.option('--ip', help='IP –∞–¥—Ä–µ—Å')
@click.option('--limit', default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def by_ip(ip, limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ IP –∞–¥—Ä–µ—Å—É."""
    from app.models import AuditLog
    
    if not ip:
        click.echo("–£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é --ip")
        return
    
    logs = AuditLog.get_logs_by_ip(ip, limit)
    
    if not logs:
        click.echo(f"–î–µ–π—Å—Ç–≤–∏–π —Å IP {ip} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    click.echo(f"\nüåê –î–µ–π—Å—Ç–≤–∏—è —Å IP {ip} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}):\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–ì–æ—Å—Ç—å"
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')} | {staff_name} | {log.action}")

@audit.command()
@click.option('--action', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è')
@click.option('--limit', default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def by_action(action, limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–µ–π—Å—Ç–≤–∏—é."""
    from app.models import AuditLog
    
    logs = AuditLog.get_by_action(action, limit)
    
    if not logs:
        click.echo(f"–î–µ–π—Å—Ç–≤–∏–π '{action}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    click.echo(f"\nüéØ –î–µ–π—Å—Ç–≤–∏–µ '{action}' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}):\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        details = log.get_details()
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name}")
        
        if log.table_affected:
            click.echo(f"ü™ë –°—Ç–æ–ª: {log.table_affected}")
        if log.order_affected:
            click.echo(f"üßæ –ó–∞–∫–∞–∑: {log.order_affected}")
        
        if 'response_status' in details:
            status = details['response_status']
            color = 'green' if status < 400 else 'red'
            click.echo(click.style(f"üìä {status}", fg=color))
        
        click.echo("-" * 40)

@audit.command()
@click.option('--table-id', type=int, required=True, help='ID —Å—Ç–æ–ª–∞')
@click.option('--limit', default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def by_table(table_id, limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Å—Ç–æ–ª—É."""
    from app.models import AuditLog, Table
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
    table = Table.query.get(table_id)
    if not table:
        click.echo(f"‚ùå –°—Ç–æ–ª {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    logs = AuditLog.get_by_table(table_id, limit)
    
    if not logs:
        click.echo(f"–î–µ–π—Å—Ç–≤–∏–π –ø–æ —Å—Ç–æ–ª—É {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    click.echo(f"\nü™ë –î–µ–π—Å—Ç–≤–∏—è –ø–æ —Å—Ç–æ–ª—É {table_id} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}):\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name} | üéØ {log.action}")
        
        if log.order_affected:
            click.echo(f"üßæ –°–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {log.order_affected}")
        
        details = log.get_details()
        if 'response_status' in details:
            status = details['response_status']
            color = 'green' if status < 400 else 'red'
            click.echo(click.style(f"üìä {status}", fg=color))
        
        click.echo("-" * 40)

@audit.command()
@click.option('--order-id', type=int, required=True, help='ID –∑–∞–∫–∞–∑–∞')
@click.option('--limit', default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def by_order(order_id, limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–∫–∞–∑—É."""
    from app.models import AuditLog, Order
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = Order.query.get(order_id)
    if not order:
        click.echo(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    logs = AuditLog.get_by_order(order_id, limit)
    
    if not logs:
        click.echo(f"–î–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–∫–∞–∑—É {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    click.echo(f"\nüßæ –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É {order_id} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}):\n")
    click.echo(f"üìã –ó–∞–∫–∞–∑ –Ω–∞ —Å—Ç–æ–ª–µ {order.table.table_number if order.table else 'N/A'}")
    click.echo(f"üí∞ –°—É–º–º–∞: {order.total_amount} | üë• –ì–æ—Å—Ç–µ–π: {order.guest_count}")
    click.echo("-" * 60)
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name} | üéØ {log.action}")
        
        details = log.get_details()
        if 'response_status' in details:
            status = details['response_status']
            color = 'green' if status < 400 else 'red'
            click.echo(click.style(f"üìä {status}", fg=color))
        
        click.echo("-" * 40)

@audit.command()
@click.option('--from', 'date_from', required=True, help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM)')
@click.option('--to', 'date_to', required=True, help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM)')
@click.option('--limit', default=100, help='–ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def date_range(date_from, date_to, limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
    from app.models import AuditLog
    from datetime import datetime
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        if len(date_from) == 10:  # YYYY-MM-DD
            start_date = datetime.strptime(date_from, '%Y-%m-%d')
        else:  # YYYY-MM-DD HH:MM
            start_date = datetime.strptime(date_from, '%Y-%m-%d %H:%M')
        
        if len(date_to) == 10:  # YYYY-MM-DD
            end_date = datetime.strptime(date_to, '%Y-%m-%d')
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            end_date = end_date.replace(hour=23, minute=59, second=59)
        else:  # YYYY-MM-DD HH:MM
            end_date = datetime.strptime(date_to, '%Y-%m-%d %H:%M')
        
    except ValueError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        click.echo("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM")
        return
    
    if start_date >= end_date:
        click.echo("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        return
    
    logs = AuditLog.get_logs_by_date_range(start_date, end_date)
    
    if not logs:
        click.echo(f"–õ–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
    logs = logs[:limit]
    
    click.echo(f"\nüìÖ –õ–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to} (–ø–æ–∫–∞–∑–∞–Ω–æ {len(logs)}):\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name} | üéØ {log.action}")
        
        if log.table_affected:
            click.echo(f"ü™ë –°—Ç–æ–ª: {log.table_affected}")
        if log.order_affected:
            click.echo(f"üßæ –ó–∞–∫–∞–∑: {log.order_affected}")
        
        details = log.get_details()
        if 'response_status' in details:
            status = details['response_status']
            color = 'green' if status < 400 else 'red'
            click.echo(click.style(f"üìä {status}", fg=color))
        
        click.echo("-" * 40)

@audit.command()
@click.option('--limit', default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@with_appcontext
def recent(limit):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π)."""
    from app.models import AuditLog
    
    logs = AuditLog.get_recent_logs_simple(limit)
    
    if not logs:
        click.echo("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    click.echo(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –∑–∞–ø–∏—Å–µ–π:\n")
    
    for log in logs:
        staff_name = log.staff.name if log.staff else "–°–∏—Å—Ç–µ–º–∞"
        
        click.echo(f"üïê {log.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        click.echo(f"üë§ {staff_name} | üéØ {log.action}")
        
        if log.table_affected:
            click.echo(f"ü™ë –°—Ç–æ–ª: {log.table_affected}")
        if log.order_affected:
            click.echo(f"üßæ –ó–∞–∫–∞–∑: {log.order_affected}")
        
        click.echo("-" * 40)

@audit.command()
@click.confirmation_option(prompt='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏?')
@click.option('--days', default=90, help='–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π')
@with_appcontext
def cleanup(days):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤."""
    from app.models import AuditLog
    from app import db
    
    cutoff_date = datetime.utcnow() - timedelta(days=days)
    
    old_logs = AuditLog.query.filter(AuditLog.created_at < cutoff_date)
    count = old_logs.count()
    
    if count == 0:
        click.echo(f"–õ–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    old_logs.delete()
    db.session.commit()
    
    click.echo(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")

@audit.command()
@with_appcontext
def test():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞."""
    from app.models import AuditLog
    
    result = AuditLog.log_action(
        action="test_audit_cli",
        details={
            "test": True,
            "timestamp": datetime.utcnow().isoformat(),
            "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ CLI"
        },
        ip_address="127.0.0.1"
    )
    
    click.echo(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞ ID: {result.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥
def register_audit_commands(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞—É–¥–∏—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
    app.cli.add_command(audit) 