"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.

–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import sys
import os
from typing import Dict, Any
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

from app import create_app, db
from app.models import Staff

logger = logging.getLogger(__name__)


class StaffSeeder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    @staticmethod
    def seed_staff() -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            existing_count = Staff.query.count()
            if existing_count > 0:
                return {
                    "status": "info",
                    "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_count} –∑–∞–ø–∏—Å–µ–π)"
                }
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            staff_data = [
                {
                    "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    "role": "admin", 
                    "login": "admin",
                    "password": "admin123"
                },
                {
                    "name": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç 1",
                    "role": "waiter",
                    "login": "waiter1", 
                    "password": "deniz2025"
                },
                {
                    "name": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç 2", 
                    "role": "waiter",
                    "login": "waiter2",
                    "password": "deniz2025"
                },
                {
                    "name": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç 3",
                    "role": "waiter", 
                    "login": "waiter3",
                    "password": "deniz2025"
                },
                {
                    "name": "–ö—É—Ö–Ω—è",
                    "role": "kitchen",
                    "login": "kitchen",
                    "password": "deniz2025"
                },
                {
                    "name": "–ë–∞—Ä",
                    "role": "bar",
                    "login": "bar", 
                    "password": "deniz2025"
                }
            ]
            
            created_users = []
            
            for user_data in staff_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = Staff.query.filter_by(login=user_data["login"]).first()
                if existing_user:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['login']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = Staff(
                    name=user_data["name"],
                    role=user_data["role"],
                    login=user_data["login"],
                    is_active=True
                )
                user.set_password(user_data["password"])
                
                db.session.add(user)
                created_users.append(user_data["login"])
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']} ({user_data['role']})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–æ: {len(created_users)}")
            
            return {
                "status": "success", 
                "message": f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join(created_users)}",
                "created_count": len(created_users),
                "created_users": created_users
            }
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
            }
    
    @staticmethod
    def get_test_credentials() -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        
        Returns:
            Dict[str, Any]: –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        return {
            "admin": {"login": "admin", "password": "admin123", "role": "admin"},
            "waiters": [
                {"login": "waiter1", "password": "deniz2025", "role": "waiter"},
                {"login": "waiter2", "password": "deniz2025", "role": "waiter"},
                {"login": "waiter3", "password": "deniz2025", "role": "waiter"}
            ],
            "kitchen": {"login": "kitchen", "password": "deniz2025", "role": "kitchen"},
            "bar": {"login": "bar", "password": "deniz2025", "role": "bar"}
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    app = create_app()
    
    with app.app_context():
        result = StaffSeeder.seed_staff()
        print(f"\n{result['status'].upper()}: {result['message']}")
        
        if result['status'] == 'success':
            print("\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            credentials = StaffSeeder.get_test_credentials()
            
            print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {credentials['admin']['login']} / {credentials['admin']['password']}")
            print("üë®‚Äçüíº –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã:")
            for waiter in credentials['waiters']:
                print(f"   - {waiter['login']} / {waiter['password']}")
            print(f"üë®‚Äçüç≥ –ö—É—Ö–Ω—è: {credentials['kitchen']['login']} / {credentials['kitchen']['password']}")
            print(f"üç∏ –ë–∞—Ä: {credentials['bar']['login']} / {credentials['bar']['password']}")


if __name__ == "__main__":
    main()