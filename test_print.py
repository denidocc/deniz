#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏."""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Order, OrderItem, MenuItem, Table, Staff
from app.utils.print_service import PrintService

def create_test_order():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    app = create_app()
    
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        table = Table.query.first()
        if not table:
            table = Table(table_number=1, status='available')
            db.session.add(table)
            db.session.flush()
        
        waiter = Staff.query.filter_by(role='waiter').first()
        if not waiter:
            waiter = Staff(name='–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç', role='waiter', login='test_waiter')
            waiter.set_password('password')
            db.session.add(waiter)
            db.session.flush()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            table_id=table.id,
            waiter_id=waiter.id,
            guest_count=4,
            status='–Ω–æ–≤—ã–π',
            subtotal=1350.00,
            service_charge=135.00,
            total_amount=1485.00,
            language='ru'
        )
        db.session.add(order)
        db.session.flush()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        kitchen_items = [
            {'name': '–ë–æ—Ä—â –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', 'price': 300.00, 'preparation_type': 'kitchen'},
            {'name': '–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã', 'price': 850.00, 'preparation_type': 'kitchen'}
        ]
        
        bar_items = [
            {'name': '–ö–æ–ª–∞ 0.5–ª', 'price': 100.00, 'preparation_type': 'bar'},
            {'name': '–ö–æ—Ñ–µ —ç—Å–ø—Ä–µ—Å—Å–æ', 'price': 100.00, 'preparation_type': 'bar'}
        ]
        
        all_items = kitchen_items + bar_items
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        from app.models import MenuCategory
        
        kitchen_category = MenuCategory.query.filter_by(name_ru='–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞').first()
        if not kitchen_category:
            kitchen_category = MenuCategory(
                name_ru='–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞',
                name_en='Hot Dishes',
                sort_order=1,
                is_active=True
            )
            db.session.add(kitchen_category)
            db.session.flush()
        
        bar_category = MenuCategory.query.filter_by(name_ru='–ù–∞–ø–∏—Ç–∫–∏').first()
        if not bar_category:
            bar_category = MenuCategory(
                name_ru='–ù–∞–ø–∏—Ç–∫–∏',
                name_en='Beverages',
                sort_order=2,
                is_active=True
            )
            db.session.add(bar_category)
            db.session.flush()
        
        for i, item_data in enumerate(all_items):
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –±–ª—é–¥–æ
            menu_item = MenuItem.query.filter_by(name_ru=item_data['name']).first()
            if not menu_item:
                category_id = kitchen_category.id if item_data['preparation_type'] == 'kitchen' else bar_category.id
                menu_item = MenuItem(
                    category_id=category_id,
                    name_ru=item_data['name'],
                    price=item_data['price'],
                    preparation_type=item_data['preparation_type'],
                    is_active=True
                )
                db.session.add(menu_item)
                db.session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
            order_item = OrderItem(
                order_id=order.id,
                menu_item_id=menu_item.id,
                quantity=2 if i < 2 else 1,  # 2x –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –±–ª—é–¥
                unit_price=item_data['price'],
                total_price=item_data['price'] * (2 if i < 2 else 1),
                preparation_type=item_data['preparation_type'],
                comments='–ë–µ–∑ —Å–º–µ—Ç–∞–Ω—ã' if i == 0 else '–°—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∂–∞—Ä–∫–∏' if i == 1 else None
            )
            db.session.add(order_item)
        
        db.session.commit()
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: #{order.id}")
        return order

def test_print_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏."""
    app = create_app()
    
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        order = create_test_order()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—á–∞—Ç–∏
        print_service = PrintService()
        
        print("\nüçΩÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ –∫—É—Ö–æ–Ω–Ω–æ–≥–æ —á–µ–∫–∞:")
        kitchen_items = [item for item in order.items if item.menu_item.preparation_type == 'kitchen']
        kitchen_success = print_service.print_kitchen_receipt(order, kitchen_items)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if kitchen_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("\nüçπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ –±–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞:")
        bar_items = [item for item in order.items if item.menu_item.preparation_type == 'bar']
        bar_success = print_service.print_bar_receipt(order, bar_items)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if bar_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("\nüßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:")
        final_success = print_service.print_final_receipt(order)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if final_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print(f"\nüìÅ –ß–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.path.join(os.getcwd(), 'receipts')}")

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏ —á–µ–∫–æ–≤")
    print("=" * 50)
    
    try:
        test_print_service()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc() 